{"version":3,"sources":["vertex.js"],"names":["vertexId","Vertex","point","x","y","id","graphVertex","origX","origY","edges","display","xScale","compute","placeOffsets","yScale","inEdge","filter","edge","index","indexOf","push","splice","getId","toString"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;AAIA,IAAIA,WAAW,CAAf;;IAEqBC,M;AACnB;;;;;;;;AAQA,kBAAaC,KAAb,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AAAA;;AACxB,SAAKC,EAAL,GAAUL,UAAV;AACA,SAAKE,KAAL,GAAaA,KAAb;AACA,SAAKA,KAAL,CAAWI,WAAX,GAAyB,IAAzB;AACA,SAAKH,CAAL,GAAS,KAAKI,KAAL,GAAaJ,CAAtB;AACA,SAAKC,CAAL,GAAS,KAAKI,KAAL,GAAaJ,CAAtB;AACA,SAAKK,KAAL,GAAa,EAAb;AACD;;;;4BAEQ;AACP,aAAO,KAAKJ,EAAZ;AACD;;;+BAEWK,O,EAAS;AACnB,aAAOA,QAAQC,MAAR,CAAeC,OAAf,CAAuB,KAAKT,CAA5B,IAAiC,KAAKD,KAAL,CAAWW,YAAX,CAAwBV,CAAhE;AACD;;;+BAEWO,O,EAAS;AACnB,aAAOA,QAAQI,MAAR,CAAeF,OAAf,CAAuB,KAAKR,CAA5B,IAAiC,KAAKF,KAAL,CAAWW,YAAX,CAAwBT,CAAhE;AACD;;AAED;;;;;;;;;2BAOQD,C,EAAGC,C,EAAG;AACZ,WAAKD,CAAL,GAASA,CAAT;AACA,WAAKC,CAAL,GAASA,CAAT;AACA;;;AAGD;;AAED;;;;;;;;;kCAOeW,M,EAAQ;AACrB,aAAO,KAAKN,KAAL,CAAWO,MAAX,CAAkB;AAAA,eAAQC,SAASF,MAAjB;AAAA,OAAlB,CAAP;AACD;;AAED;;;;;;;;4BAMSE,I,EAAM;AACb,UAAIC,QAAQ,KAAKT,KAAL,CAAWU,OAAX,CAAmBF,IAAnB,CAAZ;AACA,UAAIC,UAAU,CAAC,CAAf,EAAkB,KAAKT,KAAL,CAAWW,IAAX,CAAgBH,IAAhB;AACnB;;AAED;;;;;;;;+BAMYA,I,EAAM;AAChB,UAAIC,QAAQ,KAAKT,KAAL,CAAWU,OAAX,CAAmBF,IAAnB,CAAZ;AACA,UAAIC,UAAU,CAAC,CAAf,EAAkB,KAAKT,KAAL,CAAWY,MAAX,CAAkBH,KAAlB,EAAyB,CAAzB;AACnB;;;+BAEW;AACV,yBAAiB,KAAKI,KAAL,EAAjB,WAAkC,KAAKpB,KAAL,GAAa,KAAKA,KAAL,CAAWqB,QAAX,EAAb,GAAqC,mBAAvE;AACD;;;;;kBAhFkBtB,M","file":"vertex.js","sourcesContent":["/**\n * Vertex\n */\n\nlet vertexId = 0\n\nexport default class Vertex {\n  /**\n   * Vertex constructor\n   *\n   * @param {Object} point the Point (a Stop, Place, etc.) attached to this vertex\n   * @param {Number} x\n   * @param {Number} y\n   */\n\n  constructor (point, x, y) {\n    this.id = vertexId++\n    this.point = point\n    this.point.graphVertex = this\n    this.x = this.origX = x\n    this.y = this.origY = y\n    this.edges = []\n  }\n\n  getId () {\n    return this.id\n  }\n\n  getRenderX (display) {\n    return display.xScale.compute(this.x) + this.point.placeOffsets.x\n  }\n\n  getRenderY (display) {\n    return display.yScale.compute(this.y) + this.point.placeOffsets.y\n  }\n\n  /**\n   * Move to new coordinate\n   *\n   * @param {Number}\n   * @param {Number}\n   */\n\n  moveTo (x, y) {\n    this.x = x\n    this.y = y\n    /* this.edges.forEach(function (edge) {\n      edge.calculateVectors();\n    }); */\n  }\n\n  /**\n   * Get array of edges incident to vertex. Allows specification of \"incoming\"\n   * edge that will not be included in results.\n   *\n   * @param {Edge} inEdge optional incoming edge tp ignore\n   */\n\n  incidentEdges (inEdge) {\n    return this.edges.filter(edge => edge !== inEdge)\n  }\n\n  /**\n   * Add an edge to the vertex's edge list\n   *\n   * @param {Edge} edge\n   */\n\n  addEdge (edge) {\n    var index = this.edges.indexOf(edge)\n    if (index === -1) this.edges.push(edge)\n  }\n\n  /**\n   * Remove an edge from the vertex's edge list\n   *\n   * @param {Edge} edge\n   */\n\n  removeEdge (edge) {\n    var index = this.edges.indexOf(edge)\n    if (index !== -1) this.edges.splice(index, 1)\n  }\n\n  toString () {\n    return `Vertex ${this.getId()} (${this.point ? this.point.toString() : 'no point assigned'})`\n  }\n}\n"]}