{"version":3,"sources":["place.js"],"names":["Place","data","place_lat","place_lon","xy","forward","worldX","worldY","zIndex","place_id","place_name","getId","pointInfo","renderData","push","display","styler","displayStyle","compute2","renderXY","x","xScale","compute","activeZoomFactors","useGeographicRendering","graphVertex","y","yScale","radius","drawCircle","r","fill","stroke","markerBBox","width","height"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;IAMqBA,K;;;AACnB;;;;AAIA,iBAAaC,IAAb,EAAmB;AAAA;;AAAA,oIACXA,IADW;;AAGjB,QAAIA,QAAQA,KAAKC,SAAb,IAA0BD,KAAKE,SAAnC,EAA8C;AAC5C,UAAIC,KAAK,SAAGC,OAAH,CAAW,CAACJ,KAAKE,SAAN,EAAiBF,KAAKC,SAAtB,CAAX,CAAT;AACA,YAAKI,MAAL,GAAcF,GAAG,CAAH,CAAd;AACA,YAAKG,MAAL,GAAcH,GAAG,CAAH,CAAd;AACD;;AAED,UAAKI,MAAL,GAAc,MAAd;AATiB;AAUlB;;AAED;;;;;;8BAIW;AACT,aAAO,OAAP;AACD;;AAED;;;;;;4BAIS;AACP,aAAO,KAAKC,QAAZ;AACD;;AAED;;;;;;8BAIW;AACT,aAAO,KAAKC,UAAZ;AACD;;AAED;;;;;;6BAIU;AACR,aAAO,KAAKR,SAAZ;AACD;;AAED;;;;;;6BAIU;AACR,aAAO,KAAKC,SAAZ;AACD;;;8CAE0B;AACzB,aAAO,IAAP;AACD;;;wCAEoB;AACnB,aAAQ,KAAKQ,KAAL,OAAiB,MAAzB;AACD;;;sCAEkB;AACjB,aAAQ,KAAKA,KAAL,OAAiB,IAAzB;AACD;;;kCAEcC,S,EAAW;AACxB,WAAKC,UAAL,CAAgBC,IAAhB,CAAqBF,SAArB;AACD;;;yCAEqB;AACpB,aAAO,KAAKC,UAAZ;AACD;;;sCAEkB;AACjB,WAAKA,UAAL,GAAkB,EAAlB;AACD;;AAED;;;;;;;;2BAMQE,O,EAAS;AACf,iIAAaA,OAAb;AACA,UAAMC,SAASD,QAAQC,MAAvB;AACA,UAAI,CAAC,KAAKH,UAAV,EAAsB;;AAGtB,UAAII,eAAeD,OAAOE,QAAP,CAAgB,QAAhB,EAA0B,SAA1B,EAAqC,IAArC,CAAnB;AACA,UAAID,iBAAiB,MAArB,EAA6B;;AAE7B,WAAKE,QAAL,GAAgB;AACdC,WAAGL,QAAQM,MAAR,CAAeC,OAAf,CAAuBP,QAAQQ,iBAAR,CAA0BC,sBAA1B,GACtB,KAAKlB,MADiB,GAEtB,KAAKmB,WAAL,CAAiBL,CAFlB,CADW;AAIdM,WAAGX,QAAQY,MAAR,CAAeL,OAAf,CAAuBP,QAAQQ,iBAAR,CAA0BC,sBAA1B,GACtB,KAAKjB,MADiB,GAEtB,KAAKkB,WAAL,CAAiBC,CAFlB;AAJW,OAAhB;;AASA,UAAME,SAASZ,OAAOE,QAAP,CAAgB,QAAhB,EAA0B,GAA1B,EAA+B,IAA/B,KAAwC,EAAvD;AACAH,cAAQc,UAAR,CAAmB,KAAKV,QAAxB,EAAkC;AAChCW,WAAGF,MAD6B;AAEhCG,cAAMf,OAAOE,QAAP,CAAgB,QAAhB,EAA0B,MAA1B,EAAkC,IAAlC,KAA2C,MAFjB;AAGhCc,gBAAQhB,OAAOE,QAAP,CAAgB,QAAhB,EAA0B,QAA1B,EAAoC,IAApC,KAA6C,MAHrB;AAIhC,wBAAgBF,OAAOE,QAAP,CAAgB,QAAhB,EAA0B,cAA1B,EAA0C,IAA1C,KAAmD;AAJnC,OAAlC;;AAOA,WAAKe,UAAL,GAAkB;AAChBb,WAAG,KAAKD,QAAL,CAAcC,CAAd,GAAkBQ,MADL;AAEhBF,WAAG,KAAKP,QAAL,CAAcO,CAAd,GAAkBE,MAFL;AAGhBM,eAAON,SAAS,CAHA;AAIhBO,gBAAQP,SAAS;AAJD,OAAlB;AAMD;;AAED;;;;;;;;4BAMSb,O,EAAS,CACjB;;;;;kBAhIkBf,K","file":"place.js","sourcesContent":["import Point from './point'\nimport { sm } from '../util'\n\n/**\n *  Place: a Point subclass representing a 'place' that can be rendered on the\n *  map. A place is a point *other* than a transit stop/station, e.g. a home/work\n *  location, a point of interest, etc.\n */\n\nexport default class Place extends Point {\n  /**\n   *  the constructor\n   */\n\n  constructor (data) {\n    super(data)\n\n    if (data && data.place_lat && data.place_lon) {\n      var xy = sm.forward([data.place_lon, data.place_lat])\n      this.worldX = xy[0]\n      this.worldY = xy[1]\n    }\n\n    this.zIndex = 100000\n  }\n\n  /**\n   * Get Type\n   */\n\n  getType () {\n    return 'PLACE'\n  }\n\n  /**\n   * Get ID\n   */\n\n  getId () {\n    return this.place_id\n  }\n\n  /**\n   * Get Name\n   */\n\n  getName () {\n    return this.place_name\n  }\n\n  /**\n   * Get lat\n   */\n\n  getLat () {\n    return this.place_lat\n  }\n\n  /**\n   * Get lon\n   */\n\n  getLon () {\n    return this.place_lon\n  }\n\n  containsSegmentEndPoint () {\n    return true\n  }\n\n  containsFromPoint () {\n    return (this.getId() === 'from')\n  }\n\n  containsToPoint () {\n    return (this.getId() === 'to')\n  }\n\n  addRenderData (pointInfo) {\n    this.renderData.push(pointInfo)\n  }\n\n  getRenderDataArray () {\n    return this.renderData\n  }\n\n  clearRenderData () {\n    this.renderData = []\n  }\n\n  /**\n   * Draw a place\n   *\n   * @param {Display} display\n   */\n\n  render (display) {\n    super.render(display)\n    const styler = display.styler\n    if (!this.renderData) return\n\n\n    var displayStyle = styler.compute2('places', 'display', this)\n    if (displayStyle === 'none') return\n\n    this.renderXY = {\n      x: display.xScale.compute(display.activeZoomFactors.useGeographicRendering\n        ? this.worldX\n        : this.graphVertex.x),\n      y: display.yScale.compute(display.activeZoomFactors.useGeographicRendering\n        ? this.worldY\n        : this.graphVertex.y)\n    }\n\n    const radius = styler.compute2('places', 'r', this) || 10\n    display.drawCircle(this.renderXY, {\n      r: radius,\n      fill: styler.compute2('places', 'fill', this) || '#fff',\n      stroke: styler.compute2('places', 'stroke', this) || '#000',\n      'stroke-width': styler.compute2('places', 'stroke-width', this) || 2\n    })\n\n    this.markerBBox = {\n      x: this.renderXY.x - radius,\n      y: this.renderXY.y - radius,\n      width: radius * 2,\n      height: radius * 2\n    }\n  }\n\n  /**\n   * Refresh the place\n   *\n   * @param {Display} display\n   */\n\n  refresh (display) {\n  }\n}\n"]}