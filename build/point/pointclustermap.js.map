{"version":3,"sources":["pointclustermap.js"],"names":["PointClusterMap","transitive","clusters","clusterLookup","pointArr","stops","point","used","push","turnPoints","turnPoint","links","geom","voronoi","x","d","worldX","y","worldY","dist","link","source","target","getType","sourceInCluster","targetInCluster","addPointToCluster","cluster","vertexPoints","multipoint","points","addPoint","baseVertexPoints","concat"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;IAIqBA,e;AACnB,2BAAaC,UAAb,EAAyB;AAAA;;AAAA;;AACvB,SAAKA,UAAL,GAAkBA,UAAlB;;AAEA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,aAAL,GAAqB,EAArB,CAJuB,CAIC;;AAExB,QAAIC,WAAW,EAAf;AACA,yBAAQ,sBAAcH,WAAWI,KAAzB,CAAR,EAAyC,iBAAS;AAChD,UAAIC,MAAMC,IAAV,EAAgBH,SAASI,IAAT,CAAcF,KAAd;AACjB,KAFD,EAEG,IAFH;AAGA,yBAAQ,sBAAcL,WAAWQ,UAAzB,CAAR,EAA8C,qBAAa;AACzDL,eAASI,IAAT,CAAcE,SAAd;AACD,KAFD,EAEG,IAFH;;AAIA,QAAIC,QAAQ,YAAGC,IAAH,CAAQC,OAAR,GACTC,CADS,CACP,UAAUC,CAAV,EAAa;AACd,aAAOA,EAAEC,MAAT;AACD,KAHS,EAITC,CAJS,CAIP,UAAUF,CAAV,EAAa;AACd,aAAOA,EAAEG,MAAT;AACD,KANS,EAOTP,KAPS,CAOHP,QAPG,CAAZ;;AASA,yBAAQO,KAAR,EAAe,gBAAQ;AACrB,UAAIQ,OAAO,oBAASC,KAAKC,MAAL,CAAYL,MAArB,EAA6BI,KAAKC,MAAL,CAAYH,MAAzC,EACTE,KAAKE,MAAL,CAAYN,MADH,EACWI,KAAKE,MAAL,CAAYJ,MADvB,CAAX;AAEA,UAAIC,OAAO,GAAP,KAAeC,KAAKC,MAAL,CAAYE,OAAZ,OAA0B,MAA1B,IAAoCH,KAAKE,MAAL,CAAYC,OAAZ,OACrD,MADE,CAAJ,EACW;AACT,YAAIC,kBAAmBJ,KAAKC,MAAL,IAAe,MAAKlB,aAA3C;AACA,YAAIsB,kBAAmBL,KAAKE,MAAL,IAAe,MAAKnB,aAA3C;AACA,YAAIqB,mBAAmB,CAACC,eAAxB,EAAyC;AACvC,gBAAKC,iBAAL,CAAuBN,KAAKE,MAA5B,EAAoC,MAAKnB,aAAL,CAAmBiB,KAAKC,MAAxB,CAApC;AACD,SAFD,MAEO,IAAI,CAACG,eAAD,IAAoBC,eAAxB,EAAyC;AAC9C,gBAAKC,iBAAL,CAAuBN,KAAKC,MAA5B,EAAoC,MAAKlB,aAAL,CAAmBiB,KAAKE,MAAxB,CAApC;AACD,SAFM,MAEA,IAAI,CAACE,eAAD,IAAoB,CAACC,eAAzB,EAA0C;AAC/C,cAAIE,UAAU,4BAAd;AACA,gBAAKzB,QAAL,CAAcM,IAAd,CAAmBmB,OAAnB;AACA,gBAAKD,iBAAL,CAAuBN,KAAKC,MAA5B,EAAoCM,OAApC;AACA,gBAAKD,iBAAL,CAAuBN,KAAKE,MAA5B,EAAoCK,OAApC;AACD;AACF;AACF,KAlBD,EAkBG,IAlBH;;AAoBA,SAAKC,YAAL,GAAoB,EAApB;AACA,yBAAQ,KAAK1B,QAAb,EAAuB,mBAAW;AAChC,UAAI2B,aAAa,yBAAeF,QAAQG,MAAvB,CAAjB;AACA,YAAKF,YAAL,CAAkBpB,IAAlB,CAAuBqB,UAAvB;AACA,2BAAQF,QAAQG,MAAhB,EAAwB,iBAAS;AAC/BxB,cAAMuB,UAAN,GAAmBA,UAAnB;AACD,OAFD;AAGD,KAND;AAOD;;;;sCAEkBvB,K,EAAOqB,O,EAAS;AACjCA,cAAQI,QAAR,CAAiBzB,KAAjB;AACA,WAAKH,aAAL,CAAmBG,KAAnB,IAA4BqB,OAA5B;AACD;;;uCAEmB;AAClB,2BAAQ,KAAKzB,QAAb,EAAuB,mBAAW;AAChC,6BAAQyB,QAAQG,MAAhB,EAAwB,iBAAS;AAC/BxB,gBAAMuB,UAAN,GAAmB,IAAnB;AACD,SAFD;AAGD,OAJD;AAKD;;;oCAEgBG,gB,EAAkB;AACjC,UAAI,CAACA,gBAAL,EAAuB,OAAO,KAAKJ,YAAZ;AACvB,UAAIA,eAAe,KAAKA,YAAL,CAAkBK,MAAlB,EAAnB;AACA,2BAAQD,gBAAR,EAA0B,iBAAS;AACjC,YAAI,CAAC1B,MAAMuB,UAAX,EAAuBD,aAAapB,IAAb,CAAkBF,KAAlB;AACxB,OAFD;AAGA,aAAOsB,YAAP;AACD;;;;;kBA1EkB5B,e","file":"pointclustermap.js","sourcesContent":["import d3 from 'd3'\nimport { forEach } from 'lodash'\n\nimport PointCluster from './pointcluster'\nimport MultiPoint from './multipoint'\nimport { distance } from '../util'\n\n/**\n * Utility class to cluster points into MultiPoint objects\n */\n\nexport default class PointClusterMap {\n  constructor (transitive) {\n    this.transitive = transitive\n\n    this.clusters = []\n    this.clusterLookup = {} // maps Point object to its containing cluster\n\n    var pointArr = []\n    forEach(Object.values(transitive.stops), point => {\n      if (point.used) pointArr.push(point)\n    }, this)\n    forEach(Object.values(transitive.turnPoints), turnPoint => {\n      pointArr.push(turnPoint)\n    }, this)\n\n    var links = d3.geom.voronoi()\n      .x(function (d) {\n        return d.worldX\n      })\n      .y(function (d) {\n        return d.worldY\n      })\n      .links(pointArr)\n\n    forEach(links, link => {\n      var dist = distance(link.source.worldX, link.source.worldY,\n        link.target.worldX, link.target.worldY)\n      if (dist < 100 && (link.source.getType() !== 'TURN' || link.target.getType() !==\n        'TURN')) {\n        var sourceInCluster = (link.source in this.clusterLookup)\n        var targetInCluster = (link.target in this.clusterLookup)\n        if (sourceInCluster && !targetInCluster) {\n          this.addPointToCluster(link.target, this.clusterLookup[link.source])\n        } else if (!sourceInCluster && targetInCluster) {\n          this.addPointToCluster(link.source, this.clusterLookup[link.target])\n        } else if (!sourceInCluster && !targetInCluster) {\n          var cluster = new PointCluster()\n          this.clusters.push(cluster)\n          this.addPointToCluster(link.source, cluster)\n          this.addPointToCluster(link.target, cluster)\n        }\n      }\n    }, this)\n\n    this.vertexPoints = []\n    forEach(this.clusters, cluster => {\n      var multipoint = new MultiPoint(cluster.points)\n      this.vertexPoints.push(multipoint)\n      forEach(cluster.points, point => {\n        point.multipoint = multipoint\n      })\n    })\n  }\n\n  addPointToCluster (point, cluster) {\n    cluster.addPoint(point)\n    this.clusterLookup[point] = cluster\n  }\n\n  clearMultiPoints () {\n    forEach(this.clusters, cluster => {\n      forEach(cluster.points, point => {\n        point.multipoint = null\n      })\n    })\n  }\n\n  getVertexPoints (baseVertexPoints) {\n    if (!baseVertexPoints) return this.vertexPoints\n    var vertexPoints = this.vertexPoints.concat()\n    forEach(baseVertexPoints, point => {\n      if (!point.multipoint) vertexPoints.push(point)\n    })\n    return vertexPoints\n  }\n}\n"]}