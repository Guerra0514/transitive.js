{"version":3,"sources":["transitive.js"],"names":["Transitive","options","zoomEnabled","undefined","autoResize","groupEdges","el","display","data","setRenderer","initialRenderer","labeler","styler","styles","network","clear","emit","resetDisplay","reset","scaleSet","mode","getModeStyles","Display","legendEl","select","selectAll","remove","type","renderer","fitToWorldBounds","graph","bounds","render","setElement","journeyId","path","journeys","focusPath","llBounds","smWestSouth","forward","smEastNorth","setXDomain","setYDomain","computeScale","graphBounds","ll1","inverse","ll2","Math","min","max","width","height","style","resized","transform","applyTransform","prototype"],"mappings":"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","file":"transitive.js","sourcesContent":["import d3 from 'd3'\nimport Emitter from 'component-emitter'\n\nimport Network from './core/network'\nimport SvgDisplay from './display/svg-display'\nimport CanvasDisplay from './display/canvas-display'\nimport DefaultRenderer from './renderer/default-renderer'\nimport WireframeRenderer from './renderer/wireframe-renderer'\nimport Styler from './styler/styler'\nimport Labeler from './labeler/labeler'\nimport { sm } from './util'\n\n/*\n * Expose `Transitive`\n */\n\n// module.exports = Transitive\n\n/**\n * Create a new instance of `Transitive`\n *\n * @param {Object} options object\n *   - data {Object} data to render\n *   - styles {Object} styles to apply\n *   - el {Element} the DOM element to render the main display to\n *   - legendEl {Element} the DOM element to render the legend to\n *   - drawGrid {Boolean} whether to draw a background grid (defaults to false)\n *   - gridCellSize {Number} resolution of the grid in SphericalMercator meters\n *   - draggableTypes {Array} a list of network element types to enable dragging for\n *   - initialBounds {Array} initial lon/lat bounds for the display expressed as [[west, south], [east, north]]\n *   - displayMargins {Object} padding to apply to the initial rendered network within the display. Expressed in pixels for top/bottom/left/right\n *   - mapboxId {String} an Mapbox tileset id for rendering background tiles (Deprecated -- use Leaflet with Leaflet.TransitiveLayer)\n *   - zoomEnabled {Boolean} whether to enable the display's built-in zoom/pan functionality (defaults to true)\n *   - autoResize {Boolean} whether the display should listen for window resize events and update automatically (defaults to true)\n *   - groupEdges {Boolean} whether to consider edges with the same origin/destination equivalent for rendering, even if intermediate stop sequence is different (defaults to true)\n */\n\nexport default class Transitive {\n  constructor (options) {\n    if (!(this instanceof Transitive)) return new Transitive(options)\n\n    this.options = options\n    if (this.options.zoomEnabled === undefined) this.options.zoomEnabled = true\n    if (this.options.autoResize === undefined) this.options.autoResize = true\n    if (this.options.groupEdges === undefined) this.options.groupEdges = true\n\n    if (options.el) this.el = options.el\n\n    this.display = this.options.display === 'canvas'\n      ? new CanvasDisplay(this)\n      : new SvgDisplay(this)\n\n    this.data = options.data\n\n    this.setRenderer(this.options.initialRenderer || 'default')\n\n    this.labeler = new Labeler(this)\n    this.styler = new Styler(options.styles, this)\n  }\n\n  /**\n   * Clear the Network data and redraw the (empty) map\n   */\n\n  clearData () {\n    this.network = this.data = null\n    this.labeler.clear()\n    this.emit('clear data', this)\n  }\n\n  /**\n   * Update the Network data and redraw the map\n   */\n\n  updateData (data, resetDisplay) {\n    this.network = null\n    this.data = data\n    if (resetDisplay) this.display.reset()\n    else if (this.data) this.display.scaleSet = false\n    this.labeler.clear()\n    this.emit('update data', this)\n  }\n\n  /**\n   * Return the collection of default segment styles for a mode.\n   *\n   * @param {String} an OTP mode string\n   */\n\n  getModeStyles (mode) {\n    return this.styler.getModeStyles(mode, this.display || new Display(this))\n  }\n\n  /** Display/Render Methods **/\n\n  /**\n   * Set the DOM element that serves as the main map canvas\n   */\n\n  setElement (el, legendEl) {\n    if (this.el) d3.select(this.el).selectAll('*').remove()\n\n    this.el = el\n\n    this.emit('set element', this, this.el)\n    return this\n  }\n\n  /**\n   * Set the DOM element that serves as the main map canvas\n   */\n\n  setRenderer (type) {\n    switch (type) {\n      case 'wireframe':\n        this.renderer = new WireframeRenderer(this)\n        break\n      case 'default':\n        this.renderer = new DefaultRenderer(this)\n        break\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  render () {\n    if (!this.network) {\n      this.network = new Network(this, this.data)\n    }\n\n    if (!this.display.scaleSet) {\n      this.display.fitToWorldBounds(this.network.graph.bounds())\n    }\n\n    this.renderer.render()\n\n    this.emit('render', this)\n  }\n\n  /**\n   * Render to\n   *\n   * @param {Element} el\n   */\n\n  renderTo (el) {\n    this.setElement(el)\n    this.render()\n\n    this.emit('render to', this)\n    return this\n  }\n\n  /**\n   * focusJourney\n   */\n\n  focusJourney (journeyId) {\n    var path = journeyId ? this.network.journeys[journeyId].path : null\n    this.renderer.focusPath(path)\n  }\n\n  /**\n   * Sets the Display bounds\n   * @param {Array} lon/lat bounds expressed as [[west, south], [east, north]]\n   */\n\n  setDisplayBounds (llBounds) {\n    if (!this.display) return\n    const smWestSouth = sm.forward(llBounds[0])\n    const smEastNorth = sm.forward(llBounds[1])\n    this.display.setXDomain([smWestSouth[0], smEastNorth[0]])\n    this.display.setYDomain([smWestSouth[1], smEastNorth[1]])\n    this.display.computeScale()\n  }\n\n  /**\n   * Gets the Network bounds\n   * @returns {Array} lon/lat bounds expressed as [[west, south], [east, north]]\n   */\n\n  getNetworkBounds () {\n    if (!this.network || !this.network.graph) return null\n    var graphBounds = this.network.graph.bounds()\n    var ll1 = sm.inverse(graphBounds[0])\n    var ll2 = sm.inverse(graphBounds[1])\n    return [\n      [Math.min(ll1[0], ll2[0]), Math.min(ll1[1], ll2[1])],\n      [Math.max(ll1[0], ll2[0]), Math.max(ll1[1], ll2[1])]\n    ]\n  }\n\n  /**\n   * resize\n   */\n\n  resize (width, height) {\n    if (!this.display) return\n    d3.select(this.display.el)\n      .style('width', width + 'px')\n      .style('height', height + 'px')\n    this.display.resized()\n  }\n\n  /**\n   * trigger a display resize action (for externally-managed SVG containers)\n   */\n\n  resized (width, height) {\n    this.display.resized(width, height)\n  }\n\n  setTransform (transform) {\n    this.display.applyTransform(transform)\n    this.render()\n  }\n}\n\n/**\n * Mixin `Emitter`\n */\n\nEmitter(Transitive.prototype)\n"]}