{"version":3,"sources":["segmentlabel.js"],"names":["SegmentLabel","parent","text","labelText","display","drawRect","x","labelAnchor","containerWidth","y","containerHeight","fill","styler","compute2","width","height","rx","ry","drawText","getText","getPadding","fontSize","textHeight","textWidth","obj","intersectsBBox","getBBox"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA;;;;IAIqBA,Y;;;AACnB,wBAAaC,MAAb,EAAqBC,IAArB,EAA2B;AAAA;;AAAA,kJACnBD,MADmB;;AAEzB,UAAKE,SAAL,GAAiBD,IAAjB;AAFyB;AAG1B;;;;2BAEOE,O,EAAS;AACfA,cAAQC,QAAR,CAAiB;AACfC,WAAG,KAAKC,WAAL,CAAiBD,CAAjB,GAAqB,KAAKE,cAAL,GAAsB,CAD/B;AAEfC,WAAG,KAAKF,WAAL,CAAiBE,CAAjB,GAAqB,KAAKC,eAAL,GAAuB;AAFhC,OAAjB,EAGG;AACDC,cAAMP,QAAQQ,MAAR,CAAeC,QAAf,CAAwB,gBAAxB,EAA0C,YAA1C,EAAwD,KAAKZ,MAA7D,CADL;AAEDa,eAAO,KAAKN,cAFX;AAGDO,gBAAQ,KAAKL,eAHZ;AAIDM,YAAI,KAAKN,eAAL,GAAuB,CAJ1B;AAKDO,YAAI,KAAKP,eAAL,GAAuB;AAL1B,OAHH;;AAWAN,cAAQc,QAAR,CAAiB,KAAKC,OAAL,EAAjB,EAAiC;AAC/Bb,WAAG,KAAKC,WAAL,CAAiBD,CAAjB,GAAqB,KAAKE,cAAL,GAAsB,CAA3C,GAA+C,KAAKY,UAAL,EADnB;AAE/BX,WAAG,KAAKF,WAAL,CAAiBE,CAAjB,GAAqB,KAAKC,eAAL,GAAuB,CAA5C,GAAgD,KAAKU,UAAL;AAFpB,OAAjC,EAGG;AACDT,cAAMP,QAAQQ,MAAR,CAAeC,QAAf,CAAwB,gBAAxB,EAA0C,OAA1C,EAAmD,KAAKZ,MAAxD,CADL;AAED,qBAAa,KAAKoB;AAFjB,OAHH;AAOD;;;4BAEQjB,O,EAAS;AAChB;;;;;;;;AAUD;;;iCAEa;AACZ,aAAO,KAAKkB,UAAL,GAAkB,GAAzB;AACD;;;iDAE6B;AAC5B,WAAKd,cAAL,GAAsB,KAAKe,SAAL,GAAiB,KAAKH,UAAL,KAAoB,CAA3D;AACA,WAAKV,eAAL,GAAuB,KAAKY,UAAL,GAAkB,KAAKF,UAAL,KAAoB,CAA7D;AACD;;;8BAEU;AACT,aAAO;AACLd,WAAG,KAAKC,WAAL,CAAiBD,CAAjB,GAAqB,KAAKE,cAAL,GAAsB,CADzC;AAELC,WAAG,KAAKF,WAAL,CAAiBE,CAAjB,GAAqB,KAAKC,eAAL,GAAuB,CAF1C;AAGLI,eAAO,KAAKN,cAHP;AAILO,gBAAQ,KAAKL;AAJR,OAAP;AAMD;;;+BAEWc,G,EAAK;AACf,UAAIA,8BAAJ,EAA0B;AACxB;AACA,eAAO,KAAKC,cAAL,CAAoBD,IAAIE,OAAJ,EAApB,CAAP;AACD,OAHD,MAGO,IAAIF,IAAIlB,CAAJ,IAASkB,IAAIf,CAAb,IAAkBe,IAAIV,KAAtB,IAA+BU,IAAIT,MAAvC,EAA+C;AACpD,eAAO,KAAKU,cAAL,CAAoBD,GAApB,CAAP;AACD;;AAED,aAAO,KAAP;AACD;;AAED;;;;;;;;;;;;kBArEmBxB,Y","file":"segmentlabel.js","sourcesContent":["import Label from './label'\n\n/**\n * SegmentLabel object\n */\n\nexport default class SegmentLabel extends Label {\n  constructor (parent, text) {\n    super(parent)\n    this.labelText = text\n  }\n\n  render (display) {\n    display.drawRect({\n      x: this.labelAnchor.x - this.containerWidth / 2,\n      y: this.labelAnchor.y - this.containerHeight / 2\n    }, {\n      fill: display.styler.compute2('segment_labels', 'background', this.parent),\n      width: this.containerWidth,\n      height: this.containerHeight,\n      rx: this.containerHeight / 2,\n      ry: this.containerHeight / 2\n    })\n\n    display.drawText(this.getText(), {\n      x: this.labelAnchor.x - this.containerWidth / 2 + this.getPadding(),\n      y: this.labelAnchor.y - this.containerHeight / 2 + this.getPadding()\n    }, {\n      fill: display.styler.compute2('segment_labels', 'color', this.parent),\n      'font-size': this.fontSize\n    })\n  }\n\n  refresh (display) {\n    /*if (!this.labelAnchor) return\n\n    if (!this.svgGroup) this.render(display)\n\n    this.svgGroup\n      .attr('transform', (d, i) => {\n        var tx = (this.labelAnchor.x - this.containerWidth / 2)\n        var ty = (this.labelAnchor.y - this.containerHeight / 2)\n        return 'translate(' + tx + ',' + ty + ')'\n      })*/\n  }\n\n  getPadding () {\n    return this.textHeight * 0.3\n  }\n\n  computeContainerDimensions () {\n    this.containerWidth = this.textWidth + this.getPadding() * 2\n    this.containerHeight = this.textHeight + this.getPadding() * 2\n  }\n\n  getBBox () {\n    return {\n      x: this.labelAnchor.x - this.containerWidth / 2,\n      y: this.labelAnchor.y - this.containerHeight / 2,\n      width: this.containerWidth,\n      height: this.containerHeight\n    }\n  }\n\n  intersects (obj) {\n    if (obj instanceof Label) {\n      // todo: handle label-label intersection for diagonally placed labels separately\n      return this.intersectsBBox(obj.getBBox())\n    } else if (obj.x && obj.y && obj.width && obj.height) {\n      return this.intersectsBBox(obj)\n    }\n\n    return false\n  }\n\n  /*clear () {\n    this.labelAnchor = null\n    if (this.svgGroup) {\n      this.svgGroup.remove()\n      this.svgGroup = null\n    }\n  }*/\n}\n"]}