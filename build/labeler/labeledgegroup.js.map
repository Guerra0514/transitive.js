{"version":3,"sources":["labeledgegroup.js"],"names":["LabelEdgeGroup","renderedSegment","renderedEdges","rEdge","push","edgeIds","getId","textArray","pathSegment","getPatterns","shortName","pattern","route","route_short_name","indexOf","display","spacing","labelAnchors","renderLen","getRenderLength","anchorCount","Math","floor","pctSpacing","i","t","coord","coordAlongRenderedPath","loc","cur","length","edgeRenderLen","graphEdge","t2","coordAlongEdge","renderData","renderLength"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AAEA;;;;IAIqBA,c;AACnB,0BAAaC,eAAb,EAA8B;AAAA;;AAC5B,SAAKA,eAAL,GAAuBA,eAAvB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACD;;;;4BAEQC,K,EAAO;AACd,WAAKD,aAAL,CAAmBE,IAAnB,CAAwBD,KAAxB;AACA,WAAKE,OAAL,GAAe,CAAC,KAAKA,OAAN,GAAgBF,MAAMG,KAAN,EAAhB,GAAgC,KAAKD,OAAL,GAAe,GAAf,GAAqBF,MAAMG,KAAN,EAApE;AACD;;;wCAEoB;AACnB,UAAIC,YAAY,EAAhB;AACA,2BAAQ,KAAKN,eAAL,CAAqBO,WAArB,CAAiCC,WAAjC,EAAR,EAAwD,mBAAW;AACjE,YAAIC,YAAYC,QAAQC,KAAR,CAAcC,gBAA9B;AACA,YAAIN,UAAUO,OAAV,CAAkBJ,SAAlB,MAAiC,CAAC,CAAtC,EAAyCH,UAAUH,IAAV,CAAeM,SAAf;AAC1C,OAHD;AAIA,aAAOH,SAAP;AACD;;;oCAEgBQ,O,EAASC,O,EAAS;AACjC,UAAIC,eAAe,EAAnB;AACA,UAAIC,YAAY,KAAKC,eAAL,CAAqBJ,OAArB,CAAhB;AACA,UAAIK,cAAcC,KAAKC,KAAL,CAAWJ,YAAYF,OAAvB,CAAlB;AACA,UAAIO,aAAaP,UAAUE,SAA3B;;AAEA,WAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAIJ,WAApB,EAAiCI,GAAjC,EAAsC;AACpC,YAAIC,IAAKD,IAAI,CAAJ,KAAU,CAAX,GACJ,MAAOA,IAAI,CAAL,GAAUD,UADZ,GAEJ,MAAO,CAACC,IAAI,CAAL,IAAU,CAAX,GAAgBD,UAF1B;AAGA,YAAIG,QAAQ,KAAKC,sBAAL,CAA4BF,CAA5B,EAA+BV,OAA/B,CAAZ;AACA,YAAIW,KAAJ,EAAWT,aAAab,IAAb,CAAkBsB,KAAlB;AACZ;;AAED,aAAOT,YAAP;AACD;;;2CAEuBQ,C,EAAGV,O,EAAS;AAClC,UAAIG,YAAY,KAAKC,eAAL,CAAqBJ,OAArB,CAAhB;AACA,UAAIa,MAAMH,IAAIP,SAAd;;AAEA,UAAIW,MAAM,CAAV;AACA,WAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAI,KAAKtB,aAAL,CAAmB4B,MAAvC,EAA+CN,GAA/C,EAAoD;AAClD,YAAIrB,QAAQ,KAAKD,aAAL,CAAmBsB,CAAnB,CAAZ;AACA,YAAIO,gBAAgB5B,MAAM6B,SAAN,CAAgBb,eAAhB,CAAgCJ,OAAhC,CAApB;AACA,YAAIa,OAAOC,MAAME,aAAjB,EAAgC;AAC9B,cAAIE,KAAK,CAACL,MAAMC,GAAP,IAAcE,aAAvB;AACA,iBAAO5B,MAAM6B,SAAN,CAAgBE,cAAhB,CAA+BD,EAA/B,EAAmC9B,MAAMgC,UAAzC,EAAqDpB,OAArD,CAAP;AACD;AACDc,eAAOE,aAAP;AACD;AACF;;;oCAEgBhB,O,EAAS;AAAA;;AACxB,UAAI,CAAC,KAAKqB,YAAV,EAAwB;AACtB,aAAKA,YAAL,GAAoB,CAApB;AACA,6BAAQ,KAAKlC,aAAb,EAA4B,iBAAS;AACnC,gBAAKkC,YAAL,IAAqBjC,MAAM6B,SAAN,CAAgBb,eAAhB,CAAgCJ,OAAhC,CAArB;AACD,SAFD;AAGD;AACD,aAAO,KAAKqB,YAAZ;AACD;;;;;kBA7DkBpC,c","file":"labeledgegroup.js","sourcesContent":["import { forEach } from 'lodash'\n\n/**\n * LabelEdgeGroup\n */\n\nexport default class LabelEdgeGroup {\n  constructor (renderedSegment) {\n    this.renderedSegment = renderedSegment\n    this.renderedEdges = []\n  }\n\n  addEdge (rEdge) {\n    this.renderedEdges.push(rEdge)\n    this.edgeIds = !this.edgeIds ? rEdge.getId() : this.edgeIds + ',' + rEdge.getId()\n  }\n\n  getLabelTextArray () {\n    var textArray = []\n    forEach(this.renderedSegment.pathSegment.getPatterns(), pattern => {\n      var shortName = pattern.route.route_short_name\n      if (textArray.indexOf(shortName) === -1) textArray.push(shortName)\n    })\n    return textArray\n  }\n\n  getLabelAnchors (display, spacing) {\n    var labelAnchors = []\n    var renderLen = this.getRenderLength(display)\n    var anchorCount = Math.floor(renderLen / spacing)\n    var pctSpacing = spacing / renderLen\n\n    for (var i = 0; i < anchorCount; i++) {\n      var t = (i % 2 === 0)\n        ? 0.5 + (i / 2) * pctSpacing\n        : 0.5 - ((i + 1) / 2) * pctSpacing\n      var coord = this.coordAlongRenderedPath(t, display)\n      if (coord) labelAnchors.push(coord)\n    }\n\n    return labelAnchors\n  }\n\n  coordAlongRenderedPath (t, display) {\n    var renderLen = this.getRenderLength(display)\n    var loc = t * renderLen\n\n    var cur = 0\n    for (var i = 0; i < this.renderedEdges.length; i++) {\n      var rEdge = this.renderedEdges[i]\n      var edgeRenderLen = rEdge.graphEdge.getRenderLength(display)\n      if (loc <= cur + edgeRenderLen) {\n        var t2 = (loc - cur) / edgeRenderLen\n        return rEdge.graphEdge.coordAlongEdge(t2, rEdge.renderData, display)\n      }\n      cur += edgeRenderLen\n    }\n  }\n\n  getRenderLength (display) {\n    if (!this.renderLength) {\n      this.renderLength = 0\n      forEach(this.renderedEdges, rEdge => {\n        this.renderLength += rEdge.graphEdge.getRenderLength(display)\n      })\n    }\n    return this.renderLength\n  }\n}\n"]}