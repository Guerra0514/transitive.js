{"version":3,"sources":["tile-layer.js"],"names":["TileLayer","debug","require","prefix","prefixMatch","opts","el","display","height","clientHeight","id","mapboxId","width","clientWidth","projection","geo","mercator","translate","tile","tileLayer","select","append","attr","zoomed","size","bounds","llBounds","psw","pne","scale","Math","PI","dx","dy","max","x","y","renderTiles","tiles","image","style","matrix3d","selectAll","data","d","exit","remove","enter","random","k","r","Number","round","p","i","n","length","s","document","body","toLowerCase"],"mappings":";;;;;kBAawBA,S;;AAXxB;;;;AACA;;;;;;AAHA,IAAIC,QAAQC,QAAQ,OAAR,EAAiB,uBAAjB,CAAZ;;AAKA,IAAMC,SAASC,YAAY,CAAC,QAAD,EAAW,IAAX,EAAiB,KAAjB,EAAwB,GAAxB,CAAZ,CAAf;;AAEA;;;;;;AAMe,SAASJ,SAAT,CAAoBK,IAApB,EAA0B;AACvCJ,QAAM,yBAAN;;AAEA,MAAIK,KAAKD,KAAKC,EAAd;AACA,MAAIC,UAAUF,KAAKE,OAAnB;AACA,MAAIC,SAASF,GAAGG,YAAhB;AACA,MAAIC,KAAKL,KAAKM,QAAd;AACA,MAAIC,QAAQN,GAAGO,WAAf;;AAEA;AACA,MAAIC,aAAa,YAAGC,GAAH,CAAOC,QAAP,GACdC,SADc,CACJ,CAACL,QAAQ,CAAT,EAAYJ,SAAS,CAArB,CADI,CAAjB;;AAGA;AACA,MAAIU,OAAO,sBAAX;;AAEA;AACA,MAAIC,YAAY,YAAGC,MAAH,CAAUd,EAAV,EACbe,MADa,CACN,KADM,EAEbC,IAFa,CAER,OAFQ,EAEC,YAFD,CAAhB;;AAIA;AACAC;;AAEA,OAAKA,MAAL,GAAcA,MAAd;;AAEA;AACA,WAASA,MAAT,GAAmB;AACjB;AACAf,aAASF,GAAGG,YAAZ;AACAG,YAAQN,GAAGO,WAAX;;AAEA;AACAK,SAAKM,IAAL,CAAU,CAACZ,KAAD,EAAQJ,MAAR,CAAV;;AAEA;AACA,QAAIiB,SAASlB,QAAQmB,QAAR,EAAb;;AAEA;AACA,QAAIC,MAAMb,WAAWW,OAAO,CAAP,CAAX,CAAV;AACA,QAAIG,MAAMd,WAAWW,OAAO,CAAP,CAAX,CAAV;;AAEA;AACA,QAAII,QAAQf,WAAWe,KAAX,KAAqB,CAArB,GAAyBC,KAAKC,EAA1C;AACA,QAAId,YAAYH,WAAWG,SAAX,EAAhB;;AAEA,QAAIe,KAAKJ,IAAI,CAAJ,IAASD,IAAI,CAAJ,CAAlB;AACA,QAAIM,KAAKL,IAAI,CAAJ,IAASD,IAAI,CAAJ,CAAlB;;AAEAE,YAAQA,SAAS,IAAIC,KAAKI,GAAL,CAASF,KAAKpB,KAAd,EAAqBqB,KAAKzB,MAA1B,CAAb,CAAR;AACAM,eACGG,SADH,CACa,CAACL,QAAQ,CAAT,EAAYJ,SAAS,CAArB,CADb,EAEGqB,KAFH,CAESA,QAAQ,CAAR,GAAYC,KAAKC,EAF1B;;AAIA;AACAJ,UAAMb,WAAWW,OAAO,CAAP,CAAX,CAAN;AACAG,UAAMd,WAAWW,OAAO,CAAP,CAAX,CAAN;AACA,QAAIU,IAAI,CAACR,IAAI,CAAJ,IAASC,IAAI,CAAJ,CAAV,IAAoB,CAA5B;AACA,QAAIQ,IAAI,CAACT,IAAI,CAAJ,IAASC,IAAI,CAAJ,CAAV,IAAoB,CAA5B;AACAX,gBAAY,CAACL,QAAQuB,CAAT,EAAY3B,SAAS4B,CAArB,CAAZ;;AAEA;AACAlB,SACGW,KADH,CACSA,KADT,EAEGZ,SAFH,CAEaA,SAFb;;AAIA;AACAoB,gBAAYnB,MAAZ;AACD;;AAED;AACA,MAAMmB,cAAc,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,QAAIC,QAAQpB,UACTqB,KADS,CACHrC,SAAS,WADN,EACmBsC,SAASH,MAAMT,KAAf,EAAsBS,MAAMrB,SAA5B,CADnB,EAETyB,SAFS,CAEC,OAFD,EAGTC,IAHS,CAGJL,KAHI,EAGG,UAAUM,CAAV,EAAa;AACxB,aAAOA,CAAP;AACD,KALS,CAAZ;;AAOAL,UAAMM,IAAN,GACGC,MADH;;AAGAP,UAAMQ,KAAN,GAAc1B,MAAd,CAAqB,KAArB,EACGC,IADH,CACQ,OADR,EACiB,MADjB,EAEGA,IAFH,CAEQ,KAFR,EAEe,UAAUsB,CAAV,EAAa;AACxB,aAAO,YAAY,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqBd,KAAKkB,MAAL,KAAgB,CAAhB,GAAoB,CAAzC,CAAZ,GACL,uBADK,GACqBtC,EADrB,GAC0B,GAD1B,GACgCkC,EAAE,CAAF,CADhC,GACuC,GADvC,GAC6CA,EAAE,CAAF,CAD7C,GAEL,GAFK,GAECA,EAAE,CAAF,CAFD,GAEQ,MAFf;AAGD,KANH,EAOGJ,KAPH,CAOS,MAPT,EAOiB,UAAUI,CAAV,EAAa;AAC1B,aAAO,CAACA,EAAE,CAAF,KAAQ,CAAT,IAAc,IAArB;AACD,KATH,EAUGJ,KAVH,CAUS,KAVT,EAUgB,UAAUI,CAAV,EAAa;AACzB,aAAO,CAACA,EAAE,CAAF,KAAQ,CAAT,IAAc,IAArB;AACD,KAZH;AAaD,GAxBD;AAyBD;;AAED;;;;AAIA,SAASH,QAAT,CAAmBZ,KAAnB,EAA0BZ,SAA1B,EAAqC;AACnC,MAAIgC,IAAIpB,QAAQ,GAAhB;AACA,MAAIqB,IAAIrB,QAAQ,CAAR,GAAYsB,MAAZ,GAAqBrB,KAAKsB,KAAlC;AACA,SAAO,cAAc,CAACH,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgBA,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+BA,CAA/B,EAAkC,CAAlC,EAAqCC,EAAEjC,UAAU,CAAV,IAC1DY,KADwD,CAArC,EACXqB,EAAEjC,UAAU,CAAV,IAAeY,KAAjB,CADW,EACc,CADd,EACiB,CADjB,CAAd,GACoC,GAD3C;AAED;;AAED;;;;AAIA,SAASzB,WAAT,CAAsBiD,CAAtB,EAAyB;AACvB,MAAIC,IAAI,CAAC,CAAT;AACA,MAAIC,IAAIF,EAAEG,MAAV;AACA,MAAIC,IAAIC,SAASC,IAAT,CAAcnB,KAAtB;AACA,SAAO,EAAEc,CAAF,GAAMC,CAAb,EAAgB;AACd,QAAIF,EAAEC,CAAF,IAAO,WAAP,IAAsBG,CAA1B,EAA6B,OAAO,MAAMJ,EAAEC,CAAF,EAAKM,WAAL,EAAN,GAA2B,GAAlC;AAC9B;AACD,SAAO,EAAP;AACD","file":"tile-layer.js","sourcesContent":["var debug = require('debug')('transitive:tile-layer')\n\nimport d3 from 'd3'\nimport geoTile from './d3.geo.tile'\n\nconst prefix = prefixMatch(['webkit', 'ms', 'Moz', 'O'])\n\n/**\n * Tile layer takes a parent element, a zoom behavior, and a Mapbox ID\n *\n * @param {Object} opts\n */\n\nexport default function TileLayer (opts) {\n  debug('creating the tile layer')\n\n  var el = opts.el\n  var display = opts.display\n  var height = el.clientHeight\n  var id = opts.mapboxId\n  var width = el.clientWidth\n\n  // Set up the projection\n  var projection = d3.geo.mercator()\n    .translate([width / 2, height / 2])\n\n  // Set up the map tiles\n  var tile = geoTile()\n\n  // Create the tile layer\n  var tileLayer = d3.select(el)\n    .append('div')\n    .attr('class', 'tile-layer')\n\n  // Initial zoom\n  zoomed()\n\n  this.zoomed = zoomed\n\n  // Reload tiles on pan and zoom\n  function zoomed () {\n    // Get the height and width\n    height = el.clientHeight\n    width = el.clientWidth\n\n    // Set the map tile size\n    tile.size([width, height])\n\n    // Get the current display bounds\n    var bounds = display.llBounds()\n\n    // Project the bounds based on the current projection\n    var psw = projection(bounds[0])\n    var pne = projection(bounds[1])\n\n    // Based the new scale and translation vector off the current one\n    var scale = projection.scale() * 2 * Math.PI\n    var translate = projection.translate()\n\n    var dx = pne[0] - psw[0]\n    var dy = pne[1] - psw[1]\n\n    scale = scale * (1 / Math.max(dx / width, dy / height))\n    projection\n      .translate([width / 2, height / 2])\n      .scale(scale / 2 / Math.PI)\n\n    // Reproject the bounds based on the new scale and translation vector\n    psw = projection(bounds[0])\n    pne = projection(bounds[1])\n    var x = (psw[0] + pne[0]) / 2\n    var y = (psw[1] + pne[1]) / 2\n    translate = [width - x, height - y]\n\n    // Update the Geo tiles\n    tile\n      .scale(scale)\n      .translate(translate)\n\n    // Get the new set of tiles and render\n    renderTiles(tile())\n  }\n\n  // Render tiles\n  const renderTiles = (tiles) => {\n    var image = tileLayer\n      .style(prefix + 'transform', matrix3d(tiles.scale, tiles.translate))\n      .selectAll('.tile')\n      .data(tiles, function (d) {\n        return d\n      })\n\n    image.exit()\n      .remove()\n\n    image.enter().append('img')\n      .attr('class', 'tile')\n      .attr('src', function (d) {\n        return 'http://' + ['a', 'b', 'c', 'd'][Math.random() * 4 | 0] +\n          '.tiles.mapbox.com/v3/' + id + '/' + d[2] + '/' + d[0] +\n          '/' + d[1] + '.png'\n      })\n      .style('left', function (d) {\n        return (d[0] << 8) + 'px'\n      })\n      .style('top', function (d) {\n        return (d[1] << 8) + 'px'\n      })\n  }\n}\n\n/**\n * Get the 3D Transform Matrix\n */\n\nfunction matrix3d (scale, translate) {\n  var k = scale / 256\n  var r = scale % 1 ? Number : Math.round\n  return 'matrix3d(' + [k, 0, 0, 0, 0, k, 0, 0, 0, 0, k, 0, r(translate[0] *\n    scale), r(translate[1] * scale), 0, 1] + ')'\n}\n\n/**\n * Match the transform prefix\n */\n\nfunction prefixMatch (p) {\n  var i = -1\n  var n = p.length\n  var s = document.body.style\n  while (++i < n) {\n    if (p[i] + 'Transform' in s) return '-' + p[i].toLowerCase() + '-'\n  }\n  return ''\n}\n"]}