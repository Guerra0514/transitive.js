{"version":3,"sources":["d3.geo.tile.js"],"names":["d3","require","module","exports","size","scale","translate","zoomDelta","tile","z","Math","max","log","LN2","z0","round","k","pow","origin","tiles","cols","range","floor","ceil","rows","forEach","y","x","push","_","arguments","length"],"mappings":";;AAAA;;AAEA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;;AAEAC,OAAOC,OAAP,GAAiB,YAAY;AAC3B,MAAIC,OAAO,CAAC,GAAD,EAAM,GAAN,CAAX;AACA,MAAIC,QAAQ,GAAZ;AACA,MAAIC,YAAY,CAACF,KAAK,CAAL,IAAU,CAAX,EAAcA,KAAK,CAAL,IAAU,CAAxB,CAAhB;AACA,MAAIG,YAAY,CAAhB;;AAEA,WAASC,IAAT,GAAiB;AACf,QAAIC,IAAIC,KAAKC,GAAL,CAASD,KAAKE,GAAL,CAASP,KAAT,IAAkBK,KAAKG,GAAvB,GAA6B,CAAtC,EAAyC,CAAzC,CAAR;AACA,QAAIC,KAAKJ,KAAKK,KAAL,CAAWN,IAAIF,SAAf,CAAT;AACA,QAAIS,IAAIN,KAAKO,GAAL,CAAS,CAAT,EAAYR,IAAIK,EAAJ,GAAS,CAArB,CAAR;AACA,QAAII,SAAS,CAAC,CAACZ,UAAU,CAAV,IAAeD,QAAQ,CAAxB,IAA6BW,CAA9B,EAAiC,CAACV,UAAU,CAAV,IAAeD,QAAQ,CAAxB,IAA6BW,CAA9D,CAAb;AACA,QAAIG,QAAQ,EAAZ;AACA,QAAIC,OAAOpB,GAAGqB,KAAH,CAASX,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKY,KAAL,CAAW,CAACJ,OAAO,CAAP,CAAZ,CAAZ,CAAT,EAA8CR,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKa,IAAL,CAAUnB,KAAK,CAAL,IAAUY,CAAV,GAAcE,OAAO,CAAP,CAAxB,CAAZ,CAA9C,CAAX;AACA,QAAIM,OAAOxB,GAAGqB,KAAH,CAASX,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKY,KAAL,CAAW,CAACJ,OAAO,CAAP,CAAZ,CAAZ,CAAT,EAA8CR,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKa,IAAL,CAAUnB,KAAK,CAAL,IAAUY,CAAV,GAAcE,OAAO,CAAP,CAAxB,CAAZ,CAA9C,CAAX;;AAEAM,SAAKC,OAAL,CAAa,UAAUC,CAAV,EAAa;AACxBN,WAAKK,OAAL,CAAa,UAAUE,CAAV,EAAa;AACxBR,cAAMS,IAAN,CAAW,CAACD,CAAD,EAAID,CAAJ,EAAOZ,EAAP,CAAX;AACD,OAFD;AAGD,KAJD;;AAMAK,UAAMb,SAAN,GAAkBY,MAAlB;AACAC,UAAMd,KAAN,GAAcW,CAAd;;AAEA,WAAOG,KAAP;AACD;;AAEDX,OAAKJ,IAAL,GAAY,UAAUyB,CAAV,EAAa;AACvB,QAAI,CAACC,UAAUC,MAAf,EAAuB,OAAO3B,IAAP;AACvBA,WAAOyB,CAAP;AACA,WAAOrB,IAAP;AACD,GAJD;;AAMAA,OAAKH,KAAL,GAAa,UAAUwB,CAAV,EAAa;AACxB,QAAI,CAACC,UAAUC,MAAf,EAAuB,OAAO1B,KAAP;AACvBA,YAAQwB,CAAR;AACA,WAAOrB,IAAP;AACD,GAJD;;AAMAA,OAAKF,SAAL,GAAiB,UAAUuB,CAAV,EAAa;AAC5B,QAAI,CAACC,UAAUC,MAAf,EAAuB,OAAOzB,SAAP;AACvBA,gBAAYuB,CAAZ;AACA,WAAOrB,IAAP;AACD,GAJD;;AAMAA,OAAKD,SAAL,GAAiB,UAAUsB,CAAV,EAAa;AAC5B,QAAI,CAACC,UAAUC,MAAf,EAAuB,OAAOxB,SAAP;AACvBA,gBAAY,CAACsB,CAAb;AACA,WAAOrB,IAAP;AACD,GAJD;;AAMA,SAAOA,IAAP;AACD,CApDD","file":"d3.geo.tile.js","sourcesContent":["/* TODO: is is available as a library? */\n\nvar d3 = require('d3')\n\nmodule.exports = function () {\n  var size = [960, 500]\n  var scale = 256\n  var translate = [size[0] / 2, size[1] / 2]\n  var zoomDelta = 0\n\n  function tile () {\n    var z = Math.max(Math.log(scale) / Math.LN2 - 8, 0)\n    var z0 = Math.round(z + zoomDelta)\n    var k = Math.pow(2, z - z0 + 8)\n    var origin = [(translate[0] - scale / 2) / k, (translate[1] - scale / 2) / k]\n    var tiles = []\n    var cols = d3.range(Math.max(0, Math.floor(-origin[0])), Math.max(0, Math.ceil(size[0] / k - origin[0])))\n    var rows = d3.range(Math.max(0, Math.floor(-origin[1])), Math.max(0, Math.ceil(size[1] / k - origin[1])))\n\n    rows.forEach(function (y) {\n      cols.forEach(function (x) {\n        tiles.push([x, y, z0])\n      })\n    })\n\n    tiles.translate = origin\n    tiles.scale = k\n\n    return tiles\n  }\n\n  tile.size = function (_) {\n    if (!arguments.length) return size\n    size = _\n    return tile\n  }\n\n  tile.scale = function (_) {\n    if (!arguments.length) return scale\n    scale = _\n    return tile\n  }\n\n  tile.translate = function (_) {\n    if (!arguments.length) return translate\n    translate = _\n    return tile\n  }\n\n  tile.zoomDelta = function (_) {\n    if (!arguments.length) return zoomDelta\n    zoomDelta = +_\n    return tile\n  }\n\n  return tile\n}\n"]}