{"version":3,"sources":["display2.js"],"names":["Display","transitive","zoomFactors","options","getDefaultZoomFactors","updateActiveZoomFactors","width","height","domain","xDomain","xScale","initialXDomain","initialXRes","yDomain","yScale","initialYDomain","bounds","domains","computeDomainsFromBounds","setXDomain","setYDomain","computeScale","scaleSet","lastScale","undefined","transform","x","y","k","xMin","xMax","yMin","yMax","xOffset","yOffset","data","minScale","gridCellSize","internalVertexFactor","angleConstraint","mergeVertexThreshold","scale","updated","i","length","min","max","Number","MAX_VALUE","activeZoomFactors","newXRes","scaleChanged","zoomFactorsChanged","network","render","xmin","xmax","ymin","ymax","xRange","yRange","paddingFactor","margins","getMargins","usableHeight","top","bottom","usableWidth","left","right","displayAspect","usableDisplayAspect","graphAspect","Infinity","padding","dispX1","dispX2","dispY1","dispY2","dispXRange","dispYRange","addedYRange","xMidpoint","addedXRange","yMidpoint","displayMargins","coord","attrs","upperLeft","text","anchor","pathStr"],"mappings":"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","file":"display2.js","sourcesContent":["import linearScale from 'simple-linear-scale'\n\nexport default class Display {\n  constructor (transitive) {\n    this.transitive = transitive\n\n    this.zoomFactors = transitive.options.zoomFactors || this.getDefaultZoomFactors()\n\n    this.updateActiveZoomFactors(1)\n  }\n\n  setDimensions (width, height) {\n    this.width = width\n    this.height = height\n  }\n\n  setXDomain (domain) { // [minX , maxX]\n    this.xDomain = domain\n    this.xScale = linearScale(domain, [0, this.width])\n    if (!this.initialXDomain) {\n      this.initialXDomain = domain\n      this.initialXRes = (domain[1] - domain[0]) / this.width\n    }\n  }\n\n  setYDomain (domain) { // [minY , maxY]\n    this.yDomain = domain\n    this.yScale = linearScale(domain, [this.height, 0])\n    if (!this.initialYDomain) this.initialYDomain = domain\n  }\n\n  fitToWorldBounds (bounds) {\n    const domains = this.computeDomainsFromBounds(bounds)\n    this.setXDomain(domains[0])\n    this.setYDomain(domains[1])\n    this.computeScale()\n  }\n\n  reset () {\n    this.initialXDomain = null\n    this.initialYDomain = null\n    this.scaleSet = false\n    this.lastScale = undefined\n  }\n\n  /**\n   * Apply a transformation {x, y, k} to the *initial* state of the map, where\n   * (x, y) is the pixel offset and k is a scale factor relative to an initial\n   * zoom level of 1.0. Intended primarily to support D3-style panning/zooming.\n   */\n\n  applyTransform (transform) {\n    const { x, y, k } = transform\n\n    let xMin = this.initialXDomain[0]\n    let xMax = this.initialXDomain[1]\n    let yMin = this.initialYDomain[0]\n    let yMax = this.initialYDomain[1]\n\n    // Apply the scale factor\n    xMax = xMin + (xMax - xMin) / k\n    yMin = yMax - (yMax - yMin) / k\n\n    // Apply the translation\n    const xOffset = -x * (xMax - xMin) / this.width\n    xMin += xOffset\n    xMax += xOffset\n    const yOffset = y * (yMax - yMin) / this.height\n    yMin += yOffset\n    yMax += yOffset\n\n    // Update the scale functions and recompute the internal scale factor\n    this.setXDomain([xMin, xMax])\n    this.setYDomain([yMin, yMax])\n    this.computeScale()\n  }\n\n  getDefaultZoomFactors (data) {\n    return [{\n      minScale: 0,\n      gridCellSize: 25,\n      internalVertexFactor: 1000000,\n      angleConstraint: 45,\n      mergeVertexThreshold: 200\n    }, {\n      minScale: 1.5,\n      gridCellSize: 0,\n      internalVertexFactor: 0,\n      angleConstraint: 5,\n      mergeVertexThreshold: 0\n    }]\n  }\n\n  updateActiveZoomFactors (scale) {\n    var updated = false\n    for (var i = 0; i < this.zoomFactors.length; i++) {\n      var min = this.zoomFactors[i].minScale\n      var max = (i < this.zoomFactors.length - 1)\n        ? this.zoomFactors[i + 1].minScale\n        : Number.MAX_VALUE\n\n      // check if we've crossed into a new zoomFactor partition\n      if ((!this.lastScale || this.lastScale < min || this.lastScale >= max) &&\n        scale >= min && scale < max) {\n        this.activeZoomFactors = this.zoomFactors[i]\n        updated = true\n      }\n    }\n    return updated\n  }\n\n  computeScale () {\n    this.lastScale = this.scale\n    this.scaleSet = true\n    const newXRes = (this.xDomain[1] - this.xDomain[0]) / this.width\n    this.scale = this.initialXRes / newXRes\n    if (this.lastScale !== this.scale) this.scaleChanged()\n  }\n\n  scaleChanged () {\n    const zoomFactorsChanged = this.updateActiveZoomFactors(this.scale)\n    if (zoomFactorsChanged) {\n      this.transitive.network = null\n      this.transitive.render()\n    }\n  }\n\n  /**\n   * Compute the x/y coordinate space domains to fit the graph.\n   */\n\n  computeDomainsFromBounds (bounds) {\n    var xmin = bounds[0][0]\n    var xmax = bounds[1][0]\n    var ymin = bounds[0][1]\n    var ymax = bounds[1][1]\n    var xRange = xmax - xmin\n    var yRange = ymax - ymin\n\n    const { options } = this.transitive\n\n    var paddingFactor = (options && options.paddingFactor)\n      ? options.paddingFactor\n      : 0.1\n\n    var margins = this.getMargins()\n\n    var usableHeight = this.height - margins.top - margins.bottom\n    var usableWidth = this.width - margins.left - margins.right\n    var displayAspect = this.width / this.height\n    var usableDisplayAspect = usableWidth / usableHeight\n    var graphAspect = xRange / (yRange === 0 ? -Infinity : yRange)\n\n    var padding\n    var dispX1, dispX2, dispY1, dispY2\n    var dispXRange, dispYRange\n\n    if (usableDisplayAspect > graphAspect) { // y-axis is limiting\n      padding = paddingFactor * yRange\n      dispY1 = ymin - padding\n      dispY2 = ymax + padding\n      dispYRange = yRange + 2 * padding\n      var addedYRange = (this.height / usableHeight * dispYRange) - dispYRange\n      if (margins.top > 0 || margins.bottom > 0) {\n        dispY1 -= margins.bottom / (margins.bottom + margins.top) * addedYRange\n        dispY2 += margins.top / (margins.bottom + margins.top) * addedYRange\n      }\n      dispXRange = (dispY2 - dispY1) * displayAspect\n      var xOffset = (margins.left - margins.right) / this.width\n      var xMidpoint = (xmax + xmin - dispXRange * xOffset) / 2\n      dispX1 = xMidpoint - dispXRange / 2\n      dispX2 = xMidpoint + dispXRange / 2\n    } else { // x-axis limiting\n      padding = paddingFactor * xRange\n      dispX1 = xmin - padding\n      dispX2 = xmax + padding\n      dispXRange = xRange + 2 * padding\n      var addedXRange = (this.width / usableWidth * dispXRange) - dispXRange\n      if (margins.left > 0 || margins.right > 0) {\n        dispX1 -= margins.left / (margins.left + margins.right) * addedXRange\n        dispX2 += margins.right / (margins.left + margins.right) * addedXRange\n      }\n\n      dispYRange = (dispX2 - dispX1) / displayAspect\n      var yOffset = (margins.bottom - margins.top) / this.height\n      var yMidpoint = (ymax + ymin - dispYRange * yOffset) / 2\n      dispY1 = yMidpoint - dispYRange / 2\n      dispY2 = yMidpoint + dispYRange / 2\n    }\n\n    return [\n      [dispX1, dispX2],\n      [dispY1, dispY2]\n    ]\n  }\n\n  getMargins () {\n    return Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, this.transitive.options.displayMargins)\n  }\n\n  isInRange (x, y) {\n    return x >= 0 && x <= this.width && y >= 0 && y <= this.height\n  }\n\n  /** Methods to be defined by subclasses **/\n\n  clear () { }\n\n  drawCircle (coord, attrs) { }\n\n  drawEllipse (coord, attrs) { }\n\n  drawRect (upperLeft, attrs) { }\n\n  drawText (text, anchor, attrs) { }\n\n  drawPath (pathStr, attrs) { }\n}\n"]}