{"version":3,"sources":["renderededge.js"],"names":["rEdgeId","RenderedEdge","graphEdge","forward","type","useGeographicRendering","id","points","clearOffsets","focused","sortableType","edgeFromOffset","edgeToOffset","pattern","patterns","indexOf","push","patternIds","constuctIdListString","pathSegment","pathSegments","pathSegmentIds","offset","fromOffset","toOffset","alignmentId","getFromAlignmentId","fromVector","getToAlignmentId","toVector","setFromOffset","setToOffset","display","fromVertex","x","toVertex","y","renderData","lineWidth","computeLineWidth","fromOffsetPx","toOffsetPx","geomCoords","getGeometricCoords","getRenderCoords","firstRenderPoint","lastRenderPoint","length","pt","isInternal","point","addRenderData","rEdge","pointArray","i","getType","t","coord","coordAlongEdge","includeEnvelope","styler","env","compute","segments","envelope","parseFloat","substring","lw","renderedEdges","commonVertex","isSegmentEndPoint","thisCheck","otherCheck","p1","v1","getVector","p2","v2","isect","intersect","vertex","incidentEdges","bundlerId","e","edgeSegments","s","segment","otherId","toString","items","idArr","item","getId","sort","join"],"mappings":"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","file":"renderededge.js","sourcesContent":["import { forEach } from 'lodash'\n\nimport { isOutwardVector, lineIntersection } from '../util'\n\nvar rEdgeId = 0\n\n/**\n * RenderedEdge\n */\n\nexport default class RenderedEdge {\n  constructor (graphEdge, forward, type, useGeographicRendering) {\n    this.id = rEdgeId++\n    this.graphEdge = graphEdge\n    this.forward = forward\n    this.type = type\n    this.points = []\n    this.clearOffsets()\n    this.focused = true\n    this.sortableType = 'SEGMENT'\n    this.useGeographicRendering = useGeographicRendering\n  }\n\n  clearGraphData () {\n    this.graphEdge = null\n    this.edgeFromOffset = 0\n    this.edgeToOffset = 0\n  }\n\n  addPattern (pattern) {\n    if (!this.patterns) this.patterns = []\n    if (this.patterns.indexOf(pattern) !== -1) return\n    this.patterns.push(pattern)\n\n    // generate the patternIds field\n    this.patternIds = constuctIdListString(this.patterns)\n  }\n\n  addPathSegment (pathSegment) {\n    if (!this.pathSegments) this.pathSegments = []\n    if (this.pathSegments.indexOf(pathSegment) !== -1) return\n    this.pathSegments.push(pathSegment)\n\n    // generate the pathSegmentIds field\n    this.pathSegmentIds = constuctIdListString(this.pathSegments)\n  }\n\n  getId () {\n    return this.id\n  }\n\n  getType () {\n    return this.type\n  }\n\n  setFromOffset (offset) {\n    this.fromOffset = offset\n  }\n\n  setToOffset (offset) {\n    this.toOffset = offset\n  }\n\n  clearOffsets () {\n    this.fromOffset = 0\n    this.toOffset = 0\n  }\n\n  getAlignmentVector (alignmentId) {\n    if (this.graphEdge.getFromAlignmentId() === alignmentId) {\n      return this.graphEdge.fromVector\n    }\n    if (this.graphEdge.getToAlignmentId() === alignmentId) {\n      return this.graphEdge.toVector\n    }\n    return null\n  }\n\n  offsetAlignment (alignmentId, offset) {\n    if (this.graphEdge.getFromAlignmentId() === alignmentId) {\n      this.setFromOffset(isOutwardVector(this.graphEdge.fromVector)\n        ? offset\n        : -offset)\n    }\n    if (this.graphEdge.getToAlignmentId() === alignmentId) {\n      this.setToOffset(isOutwardVector(this.graphEdge.toVector) ? offset : -offset)\n    }\n  }\n\n  setFocused (focused) {\n    this.focused = focused\n  }\n\n  refreshRenderData (display) {\n    if (this.graphEdge.fromVertex.x === this.graphEdge.toVertex.x &&\n      this.graphEdge.fromVertex.y === this.graphEdge.toVertex.y) {\n      this.renderData = []\n      return\n    }\n\n    this.lineWidth = this.computeLineWidth(display, true)\n\n    var fromOffsetPx = this.fromOffset * this.lineWidth\n    var toOffsetPx = this.toOffset * this.lineWidth\n\n    if (this.useGeographicRendering && this.graphEdge.geomCoords) {\n      this.renderData = this.graphEdge.getGeometricCoords(fromOffsetPx, toOffsetPx, display, this.forward)\n    } else {\n      this.renderData = this.graphEdge.getRenderCoords(fromOffsetPx, toOffsetPx,\n        display, this.forward)\n    }\n\n    var firstRenderPoint = this.renderData[0]\n    var lastRenderPoint = this.renderData[this.renderData.length - 1]\n\n    var pt\n    if (!this.graphEdge.fromVertex.isInternal) {\n      pt = this.forward ? firstRenderPoint : lastRenderPoint\n      if (pt) {\n        this.graphEdge.fromVertex.point.addRenderData({\n          x: pt.x,\n          y: pt.y,\n          rEdge: this\n        })\n      }\n    }\n\n    pt = this.forward ? lastRenderPoint : firstRenderPoint\n    if (pt) {\n      this.graphEdge.toVertex.point.addRenderData({\n        x: pt.x,\n        y: pt.y,\n        rEdge: this\n      })\n    }\n\n    forEach(this.graphEdge.pointArray, (point, i) => {\n      if (point.getType() === 'TURN') return\n      var t = (i + 1) / (this.graphEdge.pointArray.length + 1)\n      var coord = this.graphEdge.coordAlongEdge(this.forward ? t : (1 - t),\n        this.renderData, display)\n      if (coord) {\n        point.addRenderData({\n          x: coord.x,\n          y: coord.y,\n          rEdge: this\n        })\n      }\n    })\n  }\n\n  computeLineWidth (display, includeEnvelope) {\n    var styler = display.styler\n    if (styler && display) {\n      // compute the line width\n      var env = styler.compute(styler.segments.envelope, display, this)\n      if (env && includeEnvelope) {\n        return parseFloat(env.substring(0, env.length - 2), 10) - 2\n      } else {\n        var lw = styler.compute(styler.segments['stroke-width'], display, this)\n        return parseFloat(lw.substring(0, lw.length - 2), 10) - 2\n      }\n    }\n  }\n\n  isFocused () {\n    return (this.focused === true)\n  }\n\n  getZIndex () {\n    return 10000\n  }\n\n  /**\n   *  Computes the point of intersection between two adjacent, offset RenderedEdges (the\n   *  edge the function is called on and a second egde passed as a parameter)\n   *  by \"extending\" the adjacent edges and finding the point of intersection. If\n   *  such a point exists, the existing renderData arrays for the edges are\n   *  adjusted accordingly, as are any associated stops.\n   */\n\n  intersect (rEdge) {\n    // do no intersect adjacent edges of unequal bundle size\n    if (this.graphEdge.renderedEdges.length !== rEdge.graphEdge.renderedEdges.length) return\n\n    var commonVertex = this.graphEdge.commonVertex(rEdge.graphEdge)\n    if (!commonVertex || commonVertex.point.isSegmentEndPoint) return\n\n    var thisCheck = (commonVertex === this.graphEdge.fromVertex && this.forward) || (commonVertex === this.graphEdge.toVertex &&\n      !this.forward)\n    var otherCheck = (commonVertex === rEdge.graphEdge.fromVertex && rEdge.forward) || (commonVertex === rEdge.graphEdge.toVertex &&\n      !rEdge.forward)\n\n    var p1 = (thisCheck)\n      ? this.renderData[0]\n      : this.renderData[this.renderData.length - 1]\n    var v1 = this.graphEdge.getVector(commonVertex)\n\n    var p2 = (otherCheck)\n      ? rEdge.renderData[0]\n      : rEdge.renderData[rEdge.renderData.length - 1]\n    var v2 = rEdge.graphEdge.getVector(commonVertex)\n\n    if ((!p1 || !p2 || !v1 || !v2) || (p1.x === p2.x && p1.y === p2.y)) return\n\n    var isect = lineIntersection(p1.x, p1.y, p1.x + v1.x, p1.y - v1.y, p2.x,\n      p2.y, p2.x + v2.x, p2.y - v2.y)\n\n    if (!isect.intersect) return\n\n    // adjust the endpoint of the first edge\n    if (thisCheck) {\n      this.renderData[0].x = isect.x\n      this.renderData[0].y = isect.y\n    } else {\n      this.renderData[this.renderData.length - 1].x = isect.x\n      this.renderData[this.renderData.length - 1].y = isect.y\n    }\n\n    // adjust the endpoint of the second edge\n    if (otherCheck) {\n      rEdge.renderData[0].x = isect.x\n      rEdge.renderData[0].y = isect.y\n    } else {\n      rEdge.renderData[rEdge.renderData.length - 1].x = isect.x\n      rEdge.renderData[rEdge.renderData.length - 1].y = isect.y\n    }\n\n    // update the point renderData\n    commonVertex.point.addRenderData({\n      x: isect.x,\n      y: isect.y,\n      rEdge: this\n    })\n  }\n\n  findExtension (vertex) {\n    var incidentEdges = vertex.incidentEdges(this.graphEdge)\n    var bundlerId = this.patternIds || this.pathSegmentIds\n    for (var e = 0; e < incidentEdges.length; e++) {\n      var edgeSegments = incidentEdges[e].renderedEdges\n      for (var s = 0; s < edgeSegments.length; s++) {\n        var segment = edgeSegments[s]\n        var otherId = segment.patternIds || segment.pathSegmentIds\n        if (bundlerId === otherId) {\n          return segment\n        }\n      }\n    }\n  }\n\n  toString () {\n    return `RenderedEdge ${this.id} type=${this.type} on ${this.graphEdge.toString()} w/ patterns ${this.patternIds} fwd=${this.forward}`\n  }\n}\n\n/**\n * Helper method to construct a merged ID string from a list of items with\n * their own IDs\n */\n\nfunction constuctIdListString (items) {\n  var idArr = []\n  forEach(items, item => {\n    idArr.push(item.getId())\n  })\n  idArr.sort()\n  return idArr.join(',')\n}\n"]}