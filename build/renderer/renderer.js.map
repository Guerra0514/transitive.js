{"version":3,"sources":["renderer.js"],"names":["Renderer","transitive","display","graph","network","styler","vertices","forEach","vertex","point","clearRenderData","edges","edge","clear","path","draggableTypes","options","retval","type","getType","indexOf","getId"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AAEA;;;;IAIqBA,Q;AACnB;;;;;AAKA,oBAAaC,UAAb,EAAyB;AAAA;;AACvB,SAAKA,UAAL,GAAkBA,UAAlB;AACD;;;;6BAES;AACR,UAAMC,UAAU,KAAKD,UAAL,CAAgBC,OAAhC;AACA,UAAMC,QAAQ,KAAKF,UAAL,CAAgBG,OAAhB,CAAwBD,KAAtC;;AAEAD,cAAQG,MAAR,GAAiB,KAAKJ,UAAL,CAAgBI,MAAjC;;AAEAF,YAAMG,QAAN,CAAeC,OAAf,CAAuB,kBAAU;AAC/BC,eAAOC,KAAP,CAAaC,eAAb;AACD,OAFD;AAGAP,YAAMQ,KAAN,CAAYJ,OAAZ,CAAoB,gBAAQ;AAC1BK,aAAKF,eAAL;AACD,OAFD;;AAIA;AACAR,cAAQW,KAAR;AACD;;AAED;;;;;;mCAIgB,CAAE;;AAElB;;;;;;8BAIWC,I,EAAM,CAAE;;;gCAENL,K,EAAO;AAClB,UAAIM,iBAAiB,KAAKd,UAAL,CAAgBe,OAAhB,CAAwBD,cAA7C;AACA,UAAI,CAACA,cAAL,EAAqB,OAAO,KAAP;;AAErB,UAAIE,SAAS,KAAb;AACA,2BAAQF,cAAR,EAAwB,gBAAQ;AAC9B,YAAIG,SAAST,MAAMU,OAAN,EAAb,EAA8B;AAC5B;AACA;AACA;AACAF,mBAAS,CAACF,eAAeG,IAAf,CAAD,IAAyBH,eAAeG,IAAf,EAAqBE,OAArB,CAA6BX,MAAMY,KAAN,EAA7B,MAAgD,CAAC,CAAnF;AACD;AACF,OAPD;AAQA,aAAOJ,MAAP;AACD;;;;;kBArDkBjB,Q","file":"renderer.js","sourcesContent":["import { forEach } from 'lodash'\n\n/**\n * A superclass for a Transitive network rendering engine.\n */\n\nexport default class Renderer {\n  /**\n   * Renderer constructor\n   * @param {Object} transitive the main Transitive object\n   */\n\n  constructor (transitive) {\n    this.transitive = transitive\n  }\n\n  render () {\n    const display = this.transitive.display\n    const graph = this.transitive.network.graph\n\n    display.styler = this.transitive.styler\n\n    graph.vertices.forEach(vertex => {\n      vertex.point.clearRenderData()\n    })\n    graph.edges.forEach(edge => {\n      edge.clearRenderData()\n    })\n\n    // Clear the display\n    display.clear()\n  }\n\n  /**\n   * sortElements\n   */\n\n  sortElements () {}\n\n  /**\n   * focusPath\n   */\n\n  focusPath (path) {}\n\n  isDraggable (point) {\n    var draggableTypes = this.transitive.options.draggableTypes\n    if (!draggableTypes) return false\n\n    var retval = false\n    forEach(draggableTypes, type => {\n      if (type === point.getType()) {\n        // Return true in ether of the following cases:\n        // 1. No ID array is provided for this point type (i.e. entire type is draggable)\n        // 2. An ID array is provided and it includes this Point's ID\n        retval = !draggableTypes[type] || draggableTypes[type].indexOf(point.getId()) !== -1\n      }\n    })\n    return retval\n  }\n}\n"]}