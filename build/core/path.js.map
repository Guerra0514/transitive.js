{"version":3,"sources":["path.js"],"names":["NetworkPath","parent","segments","segment","forEach","clearGraphData","push","points","point","paths","renderedSegments","pathSegment","concat","i","length","slice"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;IAIqBA,W;AACnB;;;;;AAKA,uBAAaC,MAAb,EAAqB;AAAA;;AACnB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;;;;mCAEeC,O,EAAS;AACvB,WAAKD,QAAL,CAAcE,OAAd,CAAsB,UAAUD,OAAV,EAAmB;AACvCA,gBAAQE,cAAR;AACD,OAFD;AAGD;;AAED;;;;;;+BAIYF,O,EAAS;AACnB,WAAKD,QAAL,CAAcI,IAAd,CAAmBH,OAAnB;AACAA,cAAQI,MAAR,CAAeH,OAAf,CAAuB,UAAUI,KAAV,EAAiB;AACtCA,cAAMC,KAAN,CAAYH,IAAZ,CAAiB,IAAjB;AACD,OAFD,EAEG,IAFH;AAGD;;;0CAEsB;AACrB,UAAII,mBAAmB,EAAvB;AACA,WAAKR,QAAL,CAAcE,OAAd,CAAsB,UAAUO,WAAV,EAAuB;AAC3CD,2BAAmBA,iBAAiBE,MAAjB,CAAwBD,YAAYD,gBAApC,CAAnB;AACD,OAFD;AAGA,aAAOA,gBAAP;AACD;;AAED;;;;;;oCAIiB;AACf,UAAIH,SAAS,EAAb;AACA,WAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAI,KAAKX,QAAL,CAAcY,MAAlC,EAA0CD,GAA1C,EAA+C;AAC7C,YAAIV,UAAU,KAAKD,QAAL,CAAcW,CAAd,CAAd;AACA,YAAIA,IAAI,CAAJ,IAASV,QAAQI,MAAR,CAAe,CAAf,MAAsB,KAAKL,QAAL,CAAcW,IAAI,CAAlB,EAAqBN,MAArB,CAA4B,KAAKL,QAAL,CAAcW,IAAI,CAAlB,EAAqBN,MAArB,CAA4BO,MAA5B,GAAqC,CAAjE,CAAnC,EAAwG;AACtGP,iBAAOK,MAAP,CAAcT,QAAQI,MAAR,CAAeQ,KAAf,CAAqB,CAArB,CAAd;AACD,SAFD,MAEO;AACLR,iBAAOK,MAAP,CAAcT,QAAQI,MAAtB;AACD;AACF;AACD,aAAOA,MAAP;AACD;;;;;kBAnDkBP,W","file":"path.js","sourcesContent":["/**\n * A path through the network graph. Composed of PathSegments (which\n * are in turn composed of a sequence of graph edges)\n */\nexport default class NetworkPath {\n  /**\n   * NetworkPath constructor\n   * @param {Object} parent the parent object (a RoutePattern or Journey)\n   */\n\n  constructor (parent) {\n    this.parent = parent\n    this.segments = []\n  }\n\n  clearGraphData (segment) {\n    this.segments.forEach(function (segment) {\n      segment.clearGraphData()\n    })\n  }\n\n  /**\n   * addSegment: add a new segment to the end of this NetworkPath\n   */\n\n  addSegment (segment) {\n    this.segments.push(segment)\n    segment.points.forEach(function (point) {\n      point.paths.push(this)\n    }, this)\n  }\n\n  getRenderedSegments () {\n    var renderedSegments = []\n    this.segments.forEach(function (pathSegment) {\n      renderedSegments = renderedSegments.concat(pathSegment.renderedSegments)\n    })\n    return renderedSegments\n  }\n\n  /**\n   * getPointArray\n   */\n\n  getPointArray () {\n    var points = []\n    for (var i = 0; i < this.segments.length; i++) {\n      var segment = this.segments[i]\n      if (i > 0 && segment.points[0] === this.segments[i - 1].points[this.segments[i - 1].points.length - 1]) {\n        points.concat(segment.points.slice(1))\n      } else {\n        points.concat(segment.points)\n      }\n    }\n    return points\n  }\n}\n"]}