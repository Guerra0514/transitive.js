{"version":3,"sources":["pattern.js"],"names":["RoutePattern","data","transitive","key","stops","interStopGeometry","push","stop","stop_id","geometry","latLons","decode","coords","forward","latLon","renderedEdges","pattern_id","pattern_name","rEdge","indexOf","alignmentId","offset","offsetAlignment","path","pathSegment","addPattern","length","addSegment"],"mappings":";;;;;;;;;;;;;;AAAA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;IAGqBA,Y;AACnB;;;;;;AAMA,wBAAaC,IAAb,EAAmBC,UAAnB,EAA+B;AAAA;;AAAA;;AAC7B,SAAK,IAAIC,GAAT,IAAgBF,IAAhB,EAAsB;AACpB,UAAIE,QAAQ,OAAZ,EAAqB;AACrB,WAAKA,GAAL,IAAYF,KAAKE,GAAL,CAAZ;AACD;;AAED;AACA,SAAKC,KAAL,GAAa,EAAb;;AAEA;AACA;AACA;AACA,SAAKC,iBAAL,GAAyB,EAAzB;;AAEA,QAAIH,UAAJ,EAAgB;AACd,2BAAQD,KAAKG,KAAb,EAAoB,gBAAQ;AAC1B;AACA,cAAKA,KAAL,CAAWE,IAAX,CAAgBJ,WAAWE,KAAX,CAAiBG,KAAKC,OAAtB,CAAhB;;AAEA;AACA;AACA,YAAID,KAAKE,QAAT,EAAmB;AACjB,cAAIC,UAAU,mBAASC,MAAT,CAAgBJ,KAAKE,QAArB,CAAd;AACA,cAAIG,SAAS,EAAb;AACA,+BAAQF,OAAR,EAAiB,kBAAU;AACzBE,mBAAON,IAAP,CAAY,SAAGO,OAAH,CAAW,CAACC,OAAO,CAAP,CAAD,EAAYA,OAAO,CAAP,CAAZ,CAAX,CAAZ;AACD,WAFD;AAGA,gBAAKT,iBAAL,CAAuBC,IAAvB,CAA4BM,MAA5B;AACD;AACF,OAdD;AAeD;;AAED,SAAKG,aAAL,GAAqB,EAArB;AACD;;;;4BAEQ;AACP,aAAO,KAAKC,UAAZ;AACD;;;mCAEe;AACd,aAAO,aAAa,KAAKA,UAAzB;AACD;;;8BAEU;AACT,aAAO,KAAKC,YAAZ;AACD;;;oCAEgBC,K,EAAO;AACtB,UAAI,KAAKH,aAAL,CAAmBI,OAAnB,CAA2BD,KAA3B,MAAsC,CAAC,CAA3C,EAA8C,KAAKH,aAAL,CAAmBT,IAAnB,CAAwBY,KAAxB;AAC/C;;;oCAEgBE,W,EAAaC,M,EAAQ;AACpC,2BAAQ,KAAKN,aAAb,EAA4B,iBAAS;AACnCG,cAAMI,eAAN,CAAsBF,WAAtB,EAAmCC,MAAnC;AACD,OAFD;AAGD;;;iCAEa;AACZ,UAAIE,OAAO,mBAAgB,IAAhB,CAAX;AACA,UAAIC,cAAc,0BAAgB,SAAhB,EAA2BD,IAA3B,CAAlB;AACAC,kBAAYC,UAAZ,CAAuB,IAAvB,EAA6B,CAA7B,EAAgC,KAAKrB,KAAL,CAAWsB,MAAX,GAAoB,CAApD;AACAH,WAAKI,UAAL,CAAgBH,WAAhB;AACA,aAAOD,IAAP;AACD;;;;;kBAtEkBvB,Y","file":"pattern.js","sourcesContent":["import { forEach } from 'lodash'\n\nimport NetworkPath from './path'\nimport PathSegment from './pathsegment'\nimport Polyline from '../util/polyline.js'\nimport { sm } from '../util'\n\n/**\n * A RoutePattern\n */\nexport default class RoutePattern {\n  /**\n   * RoutePattern constructor\n   *\n   * @param {Object} RoutePattern data object from the transitive.js input\n   */\n\n  constructor (data, transitive) {\n    for (var key in data) {\n      if (key === 'stops') continue\n      this[key] = data[key]\n    }\n\n    // the array of Stops that make up this pattern\n    this.stops = []\n\n    // the inter-stop geometry, an array of point sequences (themselves arrays)\n    // that represent the geometry beween stops i and i+1. This array should be\n    // exactly one item shorter than the stops array.\n    this.interStopGeometry = []\n\n    if (transitive) {\n      forEach(data.stops, stop => {\n        // look up the Stop in the master collection and add to the stops array\n        this.stops.push(transitive.stops[stop.stop_id])\n\n        // if inter-stop geometry is provided: decode polyline, convert points\n        // to SphericalMercator, and add to the interStopGeometry array\n        if (stop.geometry) {\n          var latLons = Polyline.decode(stop.geometry)\n          var coords = []\n          forEach(latLons, latLon => {\n            coords.push(sm.forward([latLon[1], latLon[0]]))\n          })\n          this.interStopGeometry.push(coords)\n        }\n      })\n    }\n\n    this.renderedEdges = []\n  }\n\n  getId () {\n    return this.pattern_id\n  }\n\n  getElementId () {\n    return 'pattern-' + this.pattern_id\n  }\n\n  getName () {\n    return this.pattern_name\n  }\n\n  addRenderedEdge (rEdge) {\n    if (this.renderedEdges.indexOf(rEdge) === -1) this.renderedEdges.push(rEdge)\n  }\n\n  offsetAlignment (alignmentId, offset) {\n    forEach(this.renderedEdges, rEdge => {\n      rEdge.offsetAlignment(alignmentId, offset)\n    })\n  }\n\n  createPath () {\n    var path = new NetworkPath(this)\n    var pathSegment = new PathSegment('TRANSIT', path)\n    pathSegment.addPattern(this, 0, this.stops.length - 1)\n    path.addSegment(pathSegment)\n    return path\n  }\n}\n"]}