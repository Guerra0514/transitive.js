{"version":3,"sources":["pathsegment.js"],"names":["segmentId","PathSegment","type","path","id","points","edges","renderedSegments","patternGroup","forEach","point","graphVertex","renderLength","rSegment","push","graphEdge","originVertex","forward","fromVertex","index","edgeInfo","splice","i","length","vertices","edge","toVertex","vertex","startVertex","array","oppositeVertex","multipoint","firstGraphEdge","lastGraphEdge","pattern","fromIndex","toIndex","lastStop","stop","stops","addPattern","patterns","route","route_type","endVertex","toString","edgeGroups","isFocused","currentGroup","renderedEdges","addEdge","rEdge","containsSegmentEndPoint"],"mappings":"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","file":"pathsegment.js","sourcesContent":["import { forEach } from 'lodash'\n\nimport PatternGroup from './patterngroup'\nimport LabelEdgeGroup from '../labeler/labeledgegroup.js'\n\n/**\n * PathSegment\n */\nlet segmentId = 0\n\nexport default class PathSegment {\n  constructor (type, path) {\n    this.id = segmentId++\n    this.type = type\n    this.path = path\n    this.points = []\n    this.edges = []\n    this.renderedSegments = []\n    this.patternGroup = new PatternGroup()\n  }\n\n  clearGraphData () {\n    this.edges = []\n    this.points.forEach(function (point) {\n      point.graphVertex = null\n    })\n    this.renderLength = null\n  }\n\n  getId () {\n    return this.id\n  }\n\n  getType () {\n    return this.type\n  }\n\n  addRenderedSegment (rSegment) {\n    this.renderedSegments.push(rSegment)\n  }\n\n  addEdge (graphEdge, originVertex) {\n    this.edges.push({\n      graphEdge: graphEdge,\n      forward: (originVertex === graphEdge.fromVertex)\n    })\n  }\n\n  insertEdgeAt (index, graphEdge, originVertex) {\n    var edgeInfo = {\n      graphEdge: graphEdge,\n      forward: (originVertex === graphEdge.fromVertex)\n    }\n    this.edges.splice(index, 0, edgeInfo)\n  }\n\n  removeEdge (graphEdge) {\n    var index = null\n    for (var i = 0; i < this.edges.length; i++) {\n      if (this.edges[i].graphEdge === graphEdge) {\n        index = i\n        break\n      }\n    }\n    if (index !== null) this.edges.splice(index, 1)\n  }\n\n  getEdgeIndex (graphEdge) {\n    for (var i = 0; i < this.edges.length; i++) {\n      if (this.edges[i].graphEdge === graphEdge) return i\n    }\n    return -1\n  }\n\n  /**\n   * Get graph vertices\n   */\n\n  getGraphVertices () {\n    var vertices = []\n    this.edges.forEach(function (edge, i) {\n      if (i === 0) {\n        vertices.push(edge.graphEdge.fromVertex)\n      }\n      vertices.push(edge.graphEdge.toVertex)\n    })\n    return vertices\n  }\n\n  vertexArray () {\n    var vertex = this.startVertex()\n    var array = [vertex]\n\n    this.edges.forEach(function (edgeInfo) {\n      vertex = edgeInfo.graphEdge.oppositeVertex(vertex)\n      array.push(vertex)\n    })\n\n    return array\n  }\n\n  startVertex () {\n    if (this.points[0].multipoint) return this.points[0].multipoint.graphVertex\n    if (!this.edges || this.edges.length === 0) return null\n\n    var firstGraphEdge = this.edges[0].graphEdge\n    return this.edges[0].forward ? firstGraphEdge.fromVertex : firstGraphEdge.toVertex\n\n    /* if (this.graphEdges.length === 1) return this.graphEdges[0].fromVertex;\n    var first = this.graphEdges[0],\n      next = this.graphEdges[1];\n    if (first.toVertex == next.toVertex || first.toVertex == next.fromVertex)\n      return first.fromVertex;\n    if (first.fromVertex == next.toVertex || first.fromVertex == next.fromVertex)\n      return first.toVertex;\n    return null; */\n  }\n\n  endVertex () {\n    if (this.points[this.points.length - 1].multipoint) return this.points[this.points.length - 1].multipoint.graphVertex\n    if (!this.edges || this.edges.length === 0) return null\n\n    var lastGraphEdge = this.edges[this.edges.length - 1].graphEdge\n    return this.edges[this.edges.length - 1].forward ? lastGraphEdge.toVertex : lastGraphEdge.fromVertex\n\n    /* if (this.graphEdges.length === 1) return this.graphEdges[0].toVertex;\n    var last = this.graphEdges[this.graphEdges.length - 1],\n      prev = this.graphEdges[this.graphEdges.length - 2];\n    if (last.toVertex == prev.toVertex || last.toVertex == prev.fromVertex)\n      return last.fromVertex;\n    if (last.fromVertex == prev.toVertex || last.fromVertex == prev.fromVertex)\n      return last.toVertex;\n    return null; */\n  }\n\n  addPattern (pattern, fromIndex, toIndex) {\n    // Initialize this segment's 'points' array to include the stops in the\n    // provided pattern between the specified from and to indices, inclusive.\n    // Only do this if the points array is empty or if the the length of the\n    // segment being added exceeds that of the one currently stored.\n    if ((toIndex - fromIndex + 1) > this.points.length) {\n      this.points = []\n      var lastStop = null\n      for (var i = fromIndex; i <= toIndex; i++) {\n        var stop = pattern.stops[i]\n        if (lastStop !== stop) {\n          this.points.push(stop)\n        }\n        lastStop = stop\n      }\n    }\n\n    // Add the pattern to this segment's PatternGroup\n    this.patternGroup.addPattern(pattern, fromIndex, toIndex)\n  }\n\n  getPattern () {\n    return this.patternGroup.patterns[0]\n  }\n\n  getPatterns () {\n    return this.patternGroup.patterns\n  }\n\n  getMode () {\n    return this.patternGroup.patterns[0].route.route_type\n  }\n\n  toString () {\n    var startVertex = this.startVertex()\n    var endVertex = this.endVertex()\n    return 'PathSegment id=' + this.id + ' type=' + this.type + ' from ' +\n      (startVertex ? startVertex.toString() : '(unknown)') + ' to ' +\n      (endVertex ? endVertex.toString() : '(unknown)')\n  }\n\n  getLabelEdgeGroups () {\n    var edgeGroups = []\n    forEach(this.renderedSegments, rSegment => {\n      if (!rSegment.isFocused()) return\n      var currentGroup = new LabelEdgeGroup(rSegment)\n      forEach(rSegment.renderedEdges, rEdge => {\n        currentGroup.addEdge(rEdge)\n        if (rEdge.graphEdge.toVertex.point.containsSegmentEndPoint()) {\n          edgeGroups.push(currentGroup)\n          currentGroup = new LabelEdgeGroup(rSegment)\n        }\n      })\n    })\n\n    return edgeGroups\n  }\n}\n"]}