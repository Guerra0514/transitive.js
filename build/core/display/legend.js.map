{"version":3,"sources":["legend.js"],"names":["Legend","el","display","transitive","height","select","style","legendSegments","selectAll","remove","x","spacing","y","segment","legendType","mapSegment","type","getType","mode","patterns","canvas","createCanvas","renderData","push","width","render","refresh","renderText","getDisplayText","rEdge","pattern","pattern_id","route","route_type","transferStop","isSegmentEndPoint","isTransferPoint","renderPoint","point","text","addRenderData","owner","offsetX","offsetY","styler","stylePoint","append","attr","html","container","xScale","scale","linear","yScale","zoom","svg"],"mappings":"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","file":"legend.js","sourcesContent":["import d3 from 'd3'\n\nimport RenderedEdge from '../renderer/renderededge'\nimport RenderedSegment from '../renderer/renderedsegment'\nimport Stop from '../point/stop'\nimport { parsePixelStyle } from '../util'\n\n/**\n * Legend\n */\n\nexport default class Legend {\n  constructor (el, display, transitive) {\n    this.el = el\n    this.display = display\n    this.transitive = transitive\n\n    this.height = parsePixelStyle(d3.select(el).style('height'))\n  }\n\n  render (legendSegments) {\n    d3.select(this.el).selectAll(':not(.doNotEmpty)').remove()\n\n    this.x = this.spacing\n    this.y = this.height / 2\n\n    var segment\n\n    // iterate through the representative map segments\n    for (var legendType in legendSegments) {\n      var mapSegment = legendSegments[legendType]\n\n      // create a segment solely for rendering in the legend\n      segment = new RenderedSegment()\n      segment.type = mapSegment.getType()\n      segment.mode = mapSegment.mode\n      segment.patterns = mapSegment.patterns\n\n      var canvas = this.createCanvas()\n\n      var renderData = []\n      renderData.push({\n        x: 0,\n        y: canvas.height / 2\n      })\n      renderData.push({\n        x: canvas.width,\n        y: canvas.height / 2\n      })\n\n      segment.render(canvas)\n      segment.refresh(canvas, renderData)\n\n      this.renderText(getDisplayText(legendType))\n\n      this.x += this.spacing * 2\n    }\n\n    // create the 'transfer' marker\n\n    var rEdge = new RenderedEdge(null, true, 'TRANSIT')\n    rEdge.pattern = {\n      pattern_id: 'ptn',\n      route: {\n        route_type: 1\n      }\n    }\n\n    var transferStop = new Stop()\n    transferStop.isSegmentEndPoint = true\n    transferStop.isTransferPoint = true\n\n    this.renderPoint(transferStop, rEdge, 'Transfer')\n  }\n\n  renderPoint (point, rEdge, text) {\n    var canvas = this.createCanvas()\n\n    point.addRenderData({\n      owner: point,\n      rEdge: rEdge,\n      x: canvas.width / 2,\n      y: canvas.height / 2,\n      offsetX: 0,\n      offsetY: 0\n    })\n\n    point.render(canvas)\n\n    canvas.styler.stylePoint(canvas, point)\n    point.refresh(canvas)\n\n    this.renderText(text)\n  }\n\n  renderText (text) {\n    d3.select(this.el).append('div')\n      .attr('class', 'legendLabel')\n      .html(text)\n  }\n\n  createCanvas () {\n    var container = d3.select(this.el).append('div')\n      .attr('class', 'legendSvg')\n\n    var width = parsePixelStyle(container.style('width'))\n    if (!width || width === 0) width = 30\n\n    var height = parsePixelStyle(container.style('height'))\n    if (!height || height === 0) height = this.height\n\n    var canvas = {\n      xScale: d3.scale.linear(),\n      yScale: d3.scale.linear(),\n      styler: this.transitive.styler,\n      zoom: this.display.zoom,\n      width: width,\n      height: height,\n      svg: container.append('svg')\n        .style('width', width)\n        .style('height', height)\n    }\n\n    return canvas\n  }\n}\n\nfunction getDisplayText (type) {\n  switch (type) {\n    case 'WALK':\n      return 'Walk'\n    case 'BICYCLE':\n      return 'Bike'\n    case 'CAR':\n      return 'Drive'\n    case 'TRANSIT_0':\n      return 'Tram'\n    case 'TRANSIT_1':\n      return 'Metro'\n    case 'TRANSIT_2':\n      return 'Rail'\n    case 'TRANSIT_3':\n      return 'Bus'\n    case 'TRANSIT_4':\n      return 'Ferry'\n  }\n  return type\n}\n"]}